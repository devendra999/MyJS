
1. for api call questions

        try to fetch api with 3 times
        ---------------------------------------------------
        async function fetchWithRetry(url, retries = 3, delay = 1000) {
            for (let attempt = 1; attempt <= retries; attempt++) {
                try {
                    const response = await fetch(url);
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return await response.json();
            } catch (error) {
            console.warn(`Attempt ${attempt} failed: ${error.message}`);
            if (attempt === retries) {
                throw new Error("Max retries reached. Failed to fetch data.");
            }
            await new Promise((resolve) => setTimeout(resolve, delay));
            }
        }
        }



        Handle Multiple API Calls Concurrently
        ---------------------------------------------------
        const fetchUserDataAndPosts = async () => {
        try {
            // Make both API calls concurrently using Promise.all
            const [userResponse, postsResponse] = await Promise.all([
            axios.get('https://jsonplaceholder.typicode.com/users/1'),
            axios.get('https://jsonplaceholder.typicode.com/posts?userId=1')
            ]);
            
            // Return both responses
            return {
            userData: userResponse.data,
            posts: postsResponse.data
            };
        } catch (error) {
            console.error('Error fetching data:', error);
            return null;
        }
        };

        fetchUserDataAndPosts().then((data) => {
        console.log(data);
        });




        Write an asynchronous function to fetch data from https://jsonplaceholder.typicode.com/posts and log the first 5 posts.
        ---------------------------------------------------
        async function fetchPosts() {
            try {
            const response = await fetch("https://jsonplaceholder.typicode.com/posts");
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            const posts = await response.json();
            console.log(posts.slice(0, 5));
        } catch (error) {
            console.error("Error fetching posts:", error);
            }
        }
        
        fetchPosts();
        
        
        
        Debounce an API Call
        ---------------------------------------------------
        import React, { useState } from 'react';
        import axios from 'axios';

        const SearchComponent = () => {
            const [searchTerm, setSearchTerm] = useState('');
            const [results, setResults] = useState([]);
            const [loading, setLoading] = useState(false);

            let timer;

        const debounceApiCall = (term) => {
            clearTimeout(timer); // Clear the previous timeout

            timer = setTimeout(() => {
            setLoading(true); // Set loading to true when initiating the API call
            axios
                .get(`https://api.example.com/search?q=${term}`)
                .then((response) => {
                setResults(response.data); // Set API response data
                setLoading(false); // Set loading to false after the response
                })
                .catch((error) => {
                    console.error('API Error:', error);
                    setLoading(false); // Set loading to false in case of error
                });
            }, 500); // Wait for 500ms of inactivity before making the API call
        };

        const handleInputChange = (event) => {
            const value = event.target.value;
            setSearchTerm(value);
            debounceApiCall(value); // Call debounce function on input change
        };

        return (
            <div>
            <input
                type="text"
                value={searchTerm}
                onChange={handleInputChange}
                placeholder="Search..."
                />
            {loading && <p>Loading...</p>}
            <ul>
                {results.map((result, index) => (
                    <li key={index}>{result.name}</li> // Assuming API returns an array of results
                ))}
            </ul>
            </div>
        );
        };

        export default SearchComponent;




        Throttle an API call
        ---------------------------------------------------
        import React, { useState, useEffect } from 'react';

        const ThrottledApiRequest = () => {
        const [lastRequestTime, setLastRequestTime] = useState(0);
        const [message, setMessage] = useState('');
        const throttleDelay = 2000; // 2 seconds
        
        const makeApiCall = () => {
            const currentTime = Date.now();

            // Check if 2 seconds have passed since the last request
            if (currentTime - lastRequestTime >= throttleDelay) {
            setLastRequestTime(currentTime); // Update the last request time
            
            // Simulating the API request (e.g., using fetch or axios)
            setMessage('API request made at: ' + new Date(currentTime).toISOString());

            // Here you would place your actual API call, for example:
            // fetch('https://api.example.com/data').then(response => response.json());
            } else {
                setMessage('API request throttled. Try again later.');
            }
        };

        useEffect(() => {
            const interval = setInterval(makeApiCall, 500); // Attempt every 500ms
            return () => clearInterval(interval); // Clean up the interval on unmount
        }, [lastRequestTime]); // Only run this effect when `lastRequestTime` changes

        return (
            <div>
            <button onClick={makeApiCall}>Make API Request</button>
            <p>{message}</p>
            </div>
        );
        };

        export default ThrottledApiRequest;



        Timeout for an API Call
        ---------------------------------------------------
        Note : Implement an async function that fetches data but cancels the request if it takes more than 5 seconds.

        import React, { useState, useEffect } from 'react';

        const FetchWithTimeout = () => {
        const [data, setData] = useState(null);
        const [error, setError] = useState(null);

        const fetchData = async () => {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), 5000); // Set timeout for 5 seconds

            try {
            const response = await fetch('https://jsonplaceholder.typicode.com/posts', {
                signal: controller.signal, // Pass the controller signal to fetch
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            setData(data); // Set data to state

            } catch (err) {
            if (err.name === 'AbortError') {
                setError('Request was canceled due to timeout.');
            } else {
                setError('Error fetching data: ' + err.message);
            }
            } finally {
            clearTimeout(timeoutId); // Clear the timeout after the request completes
            }
        };

        useEffect(() => {
            fetchData();
        }, []);

        return (
            <div>
            <h2>Data Fetch Example</h2>
            {error && <p style={{ color: 'red' }}>{error}</p>}
            {data ? (
                <pre>{JSON.stringify(data, null, 2)}</pre>
            ) : (
                <p>Loading data...</p>
            )}
            </div>
        );
        };

        export default FetchWithTimeout;





        Chain Multiple Asynchronous Calls
        ---------------------------------------------------
        const fetchData = async () => {
            try {
            // Fetch user details
            const userResponse = await axios.get('https://jsonplaceholder.typicode.com/users/1');
            const userDetails = userResponse.data;

            // Fetch posts of the user
            const postsResponse = await axios.get(`https://jsonplaceholder.typicode.com/posts?userId=${userDetails.id}`);
            const posts = postsResponse.data;

            // Fetch comments for the first post
            const commentsResponse = await axios.get(`https://jsonplaceholder.typicode.com/comments?postId=${posts[0].id}`);
            const comments = commentsResponse.data;

            // Combine all the data
            const combinedData = {
                userDetails,
                posts,
                commentsForFirstPost: comments,
            };

            // Set the combined data in state
            setData(combinedData);
            } catch (err) {
            setError('Error fetching data');
            console.error(err);
            } finally {
            setLoading(false);
            }
        };



2. for setTimeout and setInterval question 
---------------------------------------------------




1. Implement a Countdown Timer
---------------------------------------------------
Task: Write a function that uses setInterval to create a countdown timer from a given number of seconds. Once it reaches zero, clear the interval.


2. Delay Execution of a Function
---------------------------------------------------
Task: Create a function that delays the execution of a function by 3 seconds using setTimeout and then logs a message to the console.

3. Execute Code After a Delay
---------------------------------------------------
Task: Write a function using setTimeout that logs "Hello World!" after 2 seconds and then calls another function to log "Goodbye!" immediately after.

4. Repeatedly Fetch Data with setInterval
---------------------------------------------------
Task: Create a function that fetches data from an API every 5 seconds using setInterval. Stop fetching after 30 seconds.

import React, { useEffect, useState } from "react";

const DataFetcher = () => {
  const [data, setData] = useState(null);
  const [isFetching, setIsFetching] = useState(true);

  // Function to fetch data from API
  const fetchData = async () => {
    try {
      const response = await fetch("https://jsonplaceholder.typicode.com/posts"); // Replace with your API URL
      const result = await response.json();
      setData(result); // Store fetched data
      console.log(result); // Logging the data for debugging
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  useEffect(() => {
    // Start fetching data every 5 seconds
    const intervalId = setInterval(() => {
      if (isFetching) {
        fetchData();
      }
    }, 5000); // 5000ms = 5 seconds

    // Stop fetching after 30 seconds
    const stopFetchingTimeout = setTimeout(() => {
      setIsFetching(false); // Stop the interval fetching after 30 seconds
      clearInterval(intervalId); // Clear the interval
      console.log("Stopped fetching data.");
    }, 30000); // 30000ms = 30 seconds

    // Cleanup intervals when the component unmounts
    return () => {
      clearInterval(intervalId);
      clearTimeout(stopFetchingTimeout);
    };
  }, [isFetching]); // Dependency array ensures effect is triggered once when component mounts

  return (
    <div>
      <h1>Data Fetcher</h1>
      <div>
        {data ? (
          <pre>{JSON.stringify(data, null, 2)}</pre>
        ) : (
          <p>No data fetched yet</p>
        )}
      </div>
    </div>
  );
};

export default DataFetcher;





5. Create a Debounce Function
---------------------------------------------------
Task: Implement a debounce function using setTimeout. The function should delay the execution of a function until there has been no call for a specified amount of time.

6. Create a Timeout with Cancellation
---------------------------------------------------
Task: Write a function that sets a timeout for an API call, but allow the timeout to be cancelled by another function.

7. Implement a Repeating Action with Stop Condition
---------------------------------------------------
Task: Using setInterval, create a function that logs "Tick" every second. After logging 5 ticks, stop the interval and log "Done".

8. Implement a Clock with setInterval
---------------------------------------------------
Task: Create a clock that logs the current time every second using setInterval. The clock should stop after 1 minute.

9. Execute a Function Periodically with a Custom Delay
---------------------------------------------------
Task: Write a function that accepts two arguments: a callback function and an interval time in milliseconds. It should run the callback function every specified interval using setInterval.

10. Automatically Clear Timeout After a Set Time
---------------------------------------------------
Task: Write a function using setTimeout that logs a message after 10 seconds, but cancels the timeout if a certain condition (e.g., a button click) is met before the timeout is executed.














