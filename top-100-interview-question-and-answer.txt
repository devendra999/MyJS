<script>
    // let a = [];
    // let b = [];
    // console.log(a == b); // false // here memory location check 
    // console.log(a === b); // false // here memory location check
</script>

<script>
    // let a = [];
    // let b = a;
    // console.log(a == b); // true // here memory location are same  
    // console.log(a === b); // true // here memory location are same      
</script>

<script>
    // let a = [20];
    // let b = [20];
    // console.log(a[0] == b[0]); // true 
    // console.log(b[0] == a[0]); // true 
</script>

<script>
    //  let z = [1,2,3,4];
    //  let a = {name: 'Devendra'}
    //  console.log(...z) // 1234
</script>

<script>
    //  console.log(typeof NaN) // number
</script>

<script>
    //  let data = 10 - - 10 
    //  console.log(data) // 20 // - - plus
</script>

<script>
    //  let data = new set([1,1,2,3,4,5,3,6])
    //  console.log(data) // 1,2,3,4,5,6 // remove duplicate data
</script>

<script>
    //  let data = { name: "Devendra" };
    //  console.log(delete data.name); // true // here data value delete hota he isisliye
</script>

<script>
     //  let data = { name: "Devendra" };
    //  console.log(delete data); // false // here data vairable ko delete nai kar sakte isiliye
</script>

<script>
    // const data = ['Devendra', 'anil', 'manoj'];
    // 1. first value return
    // const [y] = data;
    // console.log(y) // Devendra // first value return

    // 2. you got first two value
    // const [y, z] = data;
    // console.log(y, z) // Devendra anil // first second value return

    // 3. IF you got second value
    // const [,y] = data;
    // console.log(y) // anil // second value return

</script>

<script>
    // how to get name property without . opereator
    // const data = {name : 'Devendra', age : 30, skil: 'manoj'};
    // const {age} = data;
</script>

<script>
     // merge 2 objects
    //  let data = { name: 'Devendra', age: 30, skil: 'manoj' };
    //  let info = { city: 'Ahmedabad', state: 'Gujarat'};
    //  data = {...data,...info}
</script>

<script>
    //  let data = { name: 'Devendra', age: 30, skil: 'manoj' };
    //  let info = { city: 'Ahmedabad', state: 'Gujarat'};
    //  data = {data,...info}
    // console.log(data) // {"data": {"name": "Devendra","age": 30,"skil": "manoj"},"city": "Ahmedabad","state": "Gujarat"} 
</script>

<script>
    //  let data = { name: 'Devendra', age: 30, skil: 'manoj' };
    //  let info = { city: 'Ahmedabad', skil: 'JS'};
    //  data = {...data,...info}
    // console.log(data) // here skil position is first object and value added second object
</script>

<script>
    //  const name = "Devendra";
    //  console.log(name()); // name is not a function
</script>

<script>
    // 1.
    //  const result = false || {} || null;
    //  console.log(result) // {} // yaha pe jo first value positiove milegi vo pring hoga

    // 2.
    //  const result = null || false || '';
    //  console.log(result) // '' // agar positive value nai milti he to vo last value consider karega

    // 3.
    // const result = [] || 0 || true;
    //  console.log(result) // [] // agar positive value nai milti he to vo last value consider karega hre first value is positive 

</script>

<script>
    // 1.
    // console.log(Promise.resolve(5)) // return Promise{ <fulllfilled>: 5}

    // 2.
    // console.log("Emoji" === "Emoji") // when compare two emoji its return true

    // 3.
    // JSON.parse(); // Parses json to a javascript value

</script>

<script>
    // 1.
    // let name = "Devendra";
    // function getName() {
    //     console.log(name)
    //     let name = "Prajapati"
    // }
    // getName(); // Error : cannot access name before initialization
   
    // 2.
    // let name = "Devendra";
    // function getName() {
    //     console.log(name)
    // }
    // getName(); // Devendra // because let is block scope
</script>

<script>
    //  console.log(`${(x => x) ('I love')} to program`) // I love to program // because here used arrow function it's need something return it's retun I love
</script>

<script>
    // outpul should be 6
    //  function sumValues(x, y, z) {
    //     return x + y + z;
    //  }
    //  console.log(sumValues(...[1, 2, 3])) // 6
</script>

<script>
    // const name = "Devendra Prjapati";
    // console.log(!typeof name === 'object') // false
    // console.log(!typeof name === 'string') // false
    // console.log(!typeof name === false) // true
    // because js run left to right typeof name it's return string but after !typeof name it means string false
</script>

<script>
    //  const name = "Devendra";
    //  const age = 30;
    //  console.log(isNaN(name)) // true
    //  console.log(isNaN(age)) // false
</script>

<script>
    //  let person = {name: 'Devendra'};
     // what can modify person Object
        // Object.seal(person) // when you seal object we cannot add key but we update value
        // person.name = "Prajapati" // name updates successfully
        // person.age = 30 // age cannot add because object is seal
</script>

<script>
    //  let data = [2,9,0,10]
    //  data.shift(data); // remove first elem
    //  data.pop(data); // remove last elem
    //  console.log(data)
     
</script>

<script>
     // check value is odd or even programically
        // let a = 31;
        // console.log(a%2); // if value return 0 its even number else it's return 1  its odd number
     
</script>

<script>
    // 1.
    //  let data = { name: "Devendra"}
    //  delete data.name;
    //  console.log(data) // {} // it's return empty array

    // 2.
    // let data = "true";
    // convert data to boolean false value
        // console.log(typeof !data) // type is boolean

    // 3.
    // let data = 'true';
    // convert data to boolean true value
        // console.log(!!data) // its return type boolean true value;

    // 4. Diffence betwwen map and foreach function
        // map function return something and foreatch not return

    // 5. 
    // let data = ['Anil', 'devendra', 'prajapati']
    // console.log(delete data[1]); // ['Anil', empty, 'prajapati'] // it's create empty space

    // 6.
    // let data = 3 ** 3
    // console.log(data) // it's return 3*3*3 

    // 6.
    // let data = 3***3;
    // console.log(data) // return error

    // 7.
    // let a = 2;
    // setTimeout(() => {
    //     console.log(a) // return 100
    // }, 0);
    // a = 100;

    // 8.
    // let a = 2;
    // let A = 30;
    // console.log(A) // 30

    // 9.
    // let A10 = 'like';  // valid variable because variable start with character not number
    // let 10A = 'hello' // invalid variable


    // 10.
    // let a = 'like';
    // let b = `like`
    // console.log(a === b) // true
    
    // 11.
    // let a = 1;
    // let c = 2;
    // console.log(--c === a) // true --c it's one number decrement

    // 12.
    // let a = 1;
    // let b = 1;
    // let c = 2;
    // console.log(a === b === --c); // false // it's compare left to right first two it's return true after compare true compare with --c

    // 13.
    // console.log(a) // undefined
    // console.log(b) // not defined
    // var a;

    // 14. 
    // console.log([[[[[]]]]]) // it's return nested array

    // 15. how to find os name ?
    // console.log(navigator.platform)

    // 16. 
    // let for = 'hello'; // Error  // for its reserved keyword

    // 17.
    // function fruits() {
    //     console.log(name) // undefined
    //     console.log(price) // Error // varibale before initialisation
    //     var name = 'Apple';
    //     let price = 50;
    // }

    // 18.
    // for(var i = 0; i < 3; i++) {
    //     setTimeout(() => {
    //         console.log(i) // here 3 prints 3 times // here var is a global variable
    //     }, 1);
    // } 

    // 19.
    // for (let i = 0; i < 3; i++) {
    //     setTimeout(() => {
    //         console.log(i) // here 0, 1, 2 print
    //     }, 1);
    // } 

    // 20.
    // console.log(+true) // 1 // age + lagane se vo 1 return karenga chahe vo boolean ho ya string ho ya number ho
    // console.log(typeof +true) // number

    // 21.
    // console.log(!'Devendra'); // false
    // console.log(typeof('Devendra')); // string

    // 22.
    // let data = 'size';
    // const bird = {
    //     size: 'small'
    // };
    // console.log(bird[data]) // small // agar variable object ke sath ese use karenge to vo valid he
    // console.log(bird["size"]) // small // key ko string ke sath use kar sakte he 
    // console.log(bird.size) // small
    // console.log(bird.data) // undefined

    // 23.
    // let c = {name: 'devendra'};
    // let d;
    // d = c; // memory location same;
    // c.name = 'anil';
    // console.log(d.name) // take latest value becanuse memory location same;

    // 24.
    // var x;
    // var x = 10;
    // console.log(x) // 10

    // 25.
    // var x;
    // let x = 10
    // console.log(x)  // Error: we can not redeclared in let

    // 26.
    // let a = 3;
    // let b = new Number(3); // here type of b is object constructor
    // console.log(a==b) // true
    // console.log(a===b) // false

    // 27. 
    // let name;
    // nmae = {};
    // console.log(name) // undefined
    // console.log(nmae) // {} //

    // 28.
    // function fruits() {
    //     console.log('hello')
    // }
    // fruits.name = 'Devendra'
    // fruits(); // hello //

    // 29.
    // function sum(a,b) {
    //     return a+b;
    // }
    // console.log(sum(1, '2')) // 12 //
    // console.log(type of sum) // function //

    // 30.
    // let number = 0;
    // console.log(number++); // 0
    // console.log(++number); // 2
    // console.log(number); // 2

    // 31.
    // function getAge(...arg) {
    //     console.log(typeof arg); // Object // jab argument spread operator me pass kiya to vo array banayga array ka type object hota he
    // }
    // getAge(31);

    // 32.
    // function getAge() {
    //     age = 21;
    //     console.log(age); //21
    // }

    // function getAge() {
    //     'use strict';
    //     age = 21;
    //     console.log(age); // age is not defined
    // }
    // getAge();

    // 33.
    // const sum = eval('10*10+5'); // eval array ko expression me convert karta he
    // console.log(sum)  // 105

    // 34.
    // let obj = {1: "a", 2: "b", 3: "c"};
    // console.log(obj.hasOwnProperty("1")); // true
    // console.log(obj.hasOwnProperty(1)); // true

    // 35.
    // const obj = {a: 'one', b: 'two', a: 'repeat'}
    // console.log(obj) // {"a": "repeat","b": "two"} // position first value last

    // 36.
    // for(let i = 1; i < 5; i++) {
    //     if(i === 3) continue; // jab i ki value 3 hogi to vo age execute nai karega dubara loop chalega
    //     console.log(i) // 1,2,4
    // }

    // 37.
    // const foo = () => console.log("first")
    // const bar = () => setTimeout(() => console.log("Second")); // settimeout last me call hoga
    // const baz = () => console.log("third")

    // bar()
    // foo()
    // baz()
    // // first, third, second

    // 38.
    // <div onclick="console.log('First Div')">
    //     <div onclick="console.log('Second Div')">
    //         <button onclick="console.log('button')">click</button>
    //     </div>
    // </div> // button, Second Div, First Div

    // 39.
    // const person = {name: 'Devendra'};
    // function sayHi(age) {
    //     return `${this.name} is ${age}`;
    // }
    // console.log(sayHi.call(person, 21)) // Devendra is 21
    // console.log(sayHi.bind(person, 21)) // return function // bind not call function 
    // console.log(sayHi.bind(person, 21)()) // Devendra is 21 // here bind and after that call function

    // 40.
    // function sayHi() {
    //     return (() => (0))();
    // }

    // 41.
    // function sayHi() {
    //     return () => 0;
    // }
    // console.log(typeof sayHi()) // function

    // 42.
    // console.log(typeof typeof 1) // string

    // 43.
    // const numbers = [1,2,3];
    // numbers[6] = 11;
    // console.log(numbers) // [1,2,3,null,null,null,11]; or empty

    // 44.
    // const numbers = [1,2,3];
    // numbers[9] = numbers;
    // console.log(numbers) // infinite condition tak ek nested array banega

    // 45.
    // console.log(!!null) // false
    // console.log(!!null) // false
    // console.log(!!null) // true

    // 46.
    // console.log(setInterval(() => console.log('Hi'), 1000));
    // console.log(setInterval(() => console.log('Hi'), 1000));
    // console.log(setInterval(() => console.log('Hi'), 1000)); 
    // // setInterval return a unique Id. here 1,2,3 retun unique Id and return Hi

    // 47.
    // console.log([..."anil"]); // ["a","n","i","l"] // here string break

    // 48.
    // let person = {name: "Devendra"};
    // const members = [person];
    // person = null;
    // console.log(members) // [{"name": "Devendra"}] //

    // 49.
    // const person = {
    //     name: 'devendra',
    //     age: 31
    // }
    // for (const item in person) {
    //     console.log(item) // name, age // return object keys
    // }

    // 50.
    // let data = 3 + 4 + '5';
    // console.log(typeof data) // string

    // 51.
    // console.log(typeof 3 + 4 + '5') // number45

    // 52. 
    // console.log(typeof (3 + 4 + +'4')) // number // kisi bhi string ke age + add karte he to vo number ban jata

    // 53.
    // console.log([] == []) // false // because memory location are different

    // 54.
    // let data = [1, 2, 3].map((num) => {
    //     if(typeof num === 'number') return;
    //     return num * 2;
    // });
    // console.log(data) // [undefined,undefined,undefined] // agar khali return kiya he to vo undefined return karega

    // 55.
    // function getInfo(member) {
    //     member.name = 'anil';
    // }
    // const person = {
    //     name: 'sarah'
    // }
    // getInfo(person);
    // console.log(person) // {"name": "anil"} // object return as a parameter call by reference

    // 56.
    // function car(){
    //     this.make = 'tata';
    //     return {make: 'kia'}
    // }
    // const myCar = new car();
    // console.log(myCar.make) // kia // return me jo property he vo purani property ko override karti he
    
    // 57.
    // function car(){
    //     this.make = 'tata';
    // }
    // const myCar = new car();
    // console.log(myCar.make) // tata

    // 58.
    // (() => {
    //     let x = (y = 10);
    // })();
    // console.log(typeof x) // undefined // because x is out of block scope
    // console.log(typeof y) // number // here y is variable

    // 59.
    // (() => {
    //     let x = 10;
    // })();
    
    // (() => {
    //     let x = 10;
    // })();
    // console.log(typeof x) // udnefined
    
    // 60.
    // (() => {
    //     let x = y = 10;
    // })();
    
    // (() => {
    //     let x = y = 20;
    // })();
    // console.log(y) // 20

    // 61.
    // let x = 100;
    // (() => {
    //     var x = 20;
    // })();
    // console.log(x) // 100

    // 62.
    // console.log(!false - true) // -1 

    // 63.
    // console.log(true + +'10') // 11

    //  How to find duplicate element in array in javascript
        // Method 1: Using a Set
        // function findDuplicates(arr) {
        //     let duplicates = [];
        //     let set = new Set();
    
        //     for (let i = 0; i < arr.length; i++) {
        //         if (set.has(arr[i])) {
        //         duplicates.push(arr[i]);
        //         } else {
        //         set.add(arr[i]);
        //         }
        //     }
    
        //     return duplicates;
        // }
    
        // function findDuplicates(arr) {
        // Method 2: Using reduce and filter
        // function findDuplicates(arr) {
        //     return arr.reduce((acc, currentValue, index, array) => {
        //         if (
        //         array.indexOf(currentValue) !== index &&
        //         acc.indexOf(currentValue) === -1
        //         ) {
        //         acc.push(currentValue);
        //         }
        //         return acc;
        //     }, []);
        // }
    
    
    // How To find max/min in a given array in javascript
        // Method 1: Using Math.max and Math.min with the Spread Operator (...)
            // const numbers = [5, 2, 9, 1, 5, 6];
            // const max = Math.max(...numbers);
            // const min = Math.min(...numbers);
    
        // Method 2: Using reduce function
            // const numbers = [5, 2, 9, 1, 5, 6];
            // const max = numbers.reduce((a, b) => Math.max(a, b));
            // const min = numbers.reduce((a, b) => Math.min(a, b));
    
        // Method 3: Using a loop (for loop or forEach)
            // let max = numbers[0]; // max value
            // numbers.forEach(num => {
            //     if (num > max) {
            //         max = num;
            //     }
            // });
    
            // let min = numbers[0]; // min value
            //     numbers.forEach(num => {
            //     if (num < min) {
            //         min = num;
            //     }
            // });
    
    
    // How To find second Largest value in array
        // Method 1: Using Sorting
            // function findSecondLargest(arr) {
            //     // Sort the array in descending order
            //     const sortedArr = arr.sort((a, b) => b - a);
            
            //     // Return the second element (index 1) of the sorted array
            //     return sortedArr[1];
            // }
    
    
    // what is difference between Filter and Find method
        // The filter method creates a new array with all elements that pass a test defined by a provided function. It iterates through each element of the array and includes only those elements for which the callback function returns true.
    
        // The find method returns the first element in the array that satisfies the provided testing function. It stops iterating once it finds an element that passes the test. If no elements pass the test, undefined is returned.
    
    
    // How to Find missing elements in a given Array 1 to 10
        // Method 1: Using Set and Array
            // function findMissingElements(arr) {
            //     const set = new Set(arr); // Convert array to Set for fast lookup
            //     const missing = [];
            
            //     // Iterate through numbers 1 to 10 and check if they are in the Set
            //     for (let i = 1; i <= 10; i++) {
            //     if (!set.has(i)) {
            //         missing.push(i);
            //     }
            //     }
            
            //     return missing;
            // }
    
        // Method 2: Using Array includes method
            // function findMissingElements(arr) {
            //     const missing = [];
            
            //     // Iterate through numbers 1 to 10 and check if they are in the input array
            //     for (let i = 1; i <= 10; i++) {
            //     if (!arr.includes(i)) {
            //         missing.push(i);
            //     }
            //     }
            
            //     return missing;
            // }
    
    
    // how to find even or odd numbers in array in javascript
        // Method 1: Using filter Method
            // function findEvenNumbers(arr) {
            //     return arr.filter(num => num % 2 === 0);
            // }
            
            // function findOddNumbers(arr) {
            //     return arr.filter(num => num % 2 !== 0);
            // }
    
        // Method 2: Using forEach Loop
            // function findEvenNumbers(arr) {
            //     const evenNumbers = [];
            //     arr.forEach(num => {
            //     if (num % 2 === 0) {
            //         evenNumbers.push(num);
            //     }
            //     });
            //     return evenNumbers;
            // }
            
            // function findOddNumbers(arr) {
            //     const oddNumbers = [];
            //     arr.forEach(num => {
            //     if (num % 2 !== 0) {
            //         oddNumbers.push(num);
            //     }
            //     });
            //     return oddNumbers;
            // }
    
    
    // how to find the sum of all elements in array in javascript
            // Method 1: Using the reduce Method
            //     function sumArray(arr) {
            //         return arr.reduce((acc, currentValue) => acc + currentValue, 0);
            //     }
    
            // // Method 2: Using a for Loop
            //     function sumArray(arr) {
            //         let sum = 0;
            //         for (let i = 0; i < arr.length; i++) {
            //         sum += arr[i];
            //         }
            //         return sum;
            //     }
    
    
    // how to find fictorial of a given number in Javascript
            // what is 5 number of factorial : 5*4*3*2*1 = 120 is a 5 factorial
                // function factorialRecursive(n) {
                //     if (n === 0 || n === 1) {
                //         return 1;
                //     }
                //     return n * factorialRecursive(n - 1);
                // }
    
    
    // how to swap two variables without using the third variable
        // let a = 5;
        // let b = 10;
        //  // Swap using array destructuring
        // [a, b] = [b, a];
        // console.log(`After swapping: a = ${a}, b = ${b}`);
    
    
    // how to merged two arrays in javascript
        // Method 1: Using the Spread Operator (...)
            // const mergedArray = [...array1, ...array2];
    
        // Method 2: Using concat Method
            // const mergedArray = array1.concat(array2);
        
        // Method 3: Using push method (to modify an existing array)
            // array1.push(...array2);
    
    
    // How to compare two Arrays are Equal or Not in JavaScript
        // const array1 = [1, 2, 3];
        // const array2 = [4, 5, 6];
        // const array3 = [4, 5, 6];
    
        // function arraysAreEqual(arr1, arr2) {
        //     return JSON.stringify(arr1) === JSON.stringify(arr2);
        // }
        // arraysAreEqual(array1, array2) // false
        // arraysAreEqual(array2, array3) // true
    
    
    // how to find intersection(i.e., the elements that exist in both arrays) of two arrays in javascript
        // Method 1: Using filter and includes
            // function intersection(arr1, arr2) {
            //     return arr1.filter(value => arr2.includes(value));
            // }
            
            // Example usage:
            // const array1 = [1, 2, 3, 4, 5];
            // const array2 = [3, 4, 5, 6, 7];
            
            // const result = intersection(array1, array2);
            // console.log('Intersection:', result); // Output: [3, 4, 5]
          
        // Method 2: Using Set for Efficiency
            // function intersection(arr1, arr2) {
            //     const set2 = new Set(arr2);
            //     return arr1.filter(value => set2.has(value));
            // }
            
            // Example usage:
            // const array1 = [1, 2, 3, 4, 5];
            // const array2 = [3, 4, 5, 6, 7];
            
            // const result = intersection(array1, array2);
            // console.log('Intersection:', result); // Output: [3, 4, 5]
          
    
    // how to find union(the combined set of unique elements from both arrays) of two arrays in javascript
        // function union(arr1, arr2) {
        //     return [...new Set([...arr1, ...arr2])];
        //   }
          
          // Example usage:
        //   const array1 = [1, 2, 3];
        //   const array2 = [3, 4, 5];
          
        //   const result = union(array1, array2);
        //   console.log('Union:', result); // Output: [1, 2, 3, 4, 5]
          

    // How does javascript execute
            //     There are two types of execution contexts: global and function. The global execution context is created when a JavaScript script first starts to run, and it represents the global scope in JavaScript. A     function execution context is created whenever a function is called, representing the function's local scope.
            
            //     1. Global Execution (this)
            //     2. Memory Phase (Creation Phase)
            //     3. Execution Phase
            
            //     example
            //         let val1 = 10;
            //         let val2 = 5;
            //         function addNum(num1, num2) {
            //             let total = num1 + num2;
            //             return total;
            //         }
            //         let result1 = addNum(val1, val2);
            //         let result2 = addNum(8, 10);
            
            //         above code memory phase is below
            //             1. val1 = undefined
            //             2. val2 = undefined
            //             3. addNum = defination
            //             4. result1 = undefined
            //             5. result2 = undefined
            
                    
            //         above code Execution phase is below
            //             1. val1 = 10
            //             2. val2 = 5
            //             3. addNum = New environment variable + execution thread (this is again create memory phase and execution phase)
            //             4. result1 = 15
            //             5. result2 = 12



    // what is javascript call stack ?
            // JavaScript uses a Call Stack to track the functions in a program. The call stack works on the Last In, First Out (LIFO) principle. This means that the most recently called function will be the first to be completed. 

</script>



1. given a string, reverse each world in the sentence ?
    
    var str = "hello dev bro";
    var savedString = str.split(" ").map((word) => {
        return word.split('').reverse().join('');
    });
    var console.log(savedString.join(' '));


2. How to check if an Object is an array or not ? Provide some code.
    Array.isArray(elem);

3. How to empty an array in javascript ? do not reset it to a new array and do not loop through to pop each value
    var arr = [1,5,8,6,7,5,4]
    arr.length = 0;

4. how to check a number is an integer ?

    var a = 12;
    if(a%1 === 0) {
        console.log("it is integer");
    } else {
        console.log("it not integer");
    }

    OR 

    Number.isInteger(a);

5. Make this work : duplicate([1,2,3,4]); // [1,2,3,4,1,2,3,4]

    var array = [1,2,3,4];
    function duplicate(array) {
        return array.concat(array);
    }

6. write a javascript that reverse a number ?
    function reverseKaro(num) {
        return Number(num.toString().split('').reverse().join(''));
    }

7. write a javascript function that checkts wheather a passed string is palindrome or not ?


8. write a javascript function that return a passed string with letters in alphabetical order

9. 
