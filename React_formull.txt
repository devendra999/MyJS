Conditionally returning JSX 
-----------------------------------------
if (isPacked) {
  return <li className="item">{name} ✔</li>;
}
return <li className="item">{name}</li>;

Conditional (ternary) operator (? :) 
-----------------------------------------
return (
  <li className="item">
    {isPacked ? name + ' ✔' : name}
  </li>
);

Logical AND operator (&&) 
-----------------------------------------
return (
  <li className="item">
    {name} {isPacked && '✔'}
  </li>
);

switch case operator for multiple conditional renderings
-----------------------------------------
function Notification({ text, status }) {
  switch (status) {
    case 'info':
      return <Info text={text} />;
    case 'warning':
      return <Warning text={text} />;
    case 'error':
      return <Error text={text} />;
    default:
      return null;
  }
}

NESTED CONDITIONAL RENDERING IN REACT
-----------------------------------------
function List({ list }) {
  const isNotAvailable = !list;
  const isEmpty = !list.length;

  return (
    <div>
      {isNotAvailable
        ? <p>Sorry, the list is not there.</p>
        : (isEmpty
          ? <p>Sorry, the list is empty.</p>
          : <div>{list.map(item => <Item item={item} />)}</div>
        )
      }
    </div>
  
CONDITIONAL RENDERING WITH HOC
-----------------------------------------
// Higher-Order Component
function withLoadingIndicator(Component) {
  return function EnhancedComponent({ isLoading, ...props }) {
    if (!isLoading) {
      return <Component {...props} />;
    }

    return (
      <div>
        <p>Loading</p>
      </div>
    );
  };
}

const ListWithLoadingIndicator = withLoadingIndicator(List);

function App({ list, isLoading }) {
  return (
    <div>
      <h1>Hello Conditional Rendering</h1>

      <ListWithLoadingIndicator isLoading={isLoading} list={list} />
    </div>
  )

CONDITIONAL RENDERING IN REACT: IF
-----------------------------------------
function List({ list }) {
  if (!list) {
    return null;
  }

  return (
    <ul>
      {list.map(item => (
        <Item key={item.id} item={item} />
      ))}
    </ul>
  );
}

CONDITIONAL RENDERING IN REACT: IF ELSE
-----------------------------------------
function List({ list }) {
  if (!list) {
    return null;
  }

  if (!list.length) {
    return <p>Sorry, the list is empty.</p>;
  } else {
    return (
      <div>
        {list.map(item => (
          <Item item={item} />
        ))}
      </div>
    );
  }
}
    
mount, unmount, and updated mount component ( life cycle method)
-----------------------------------------
function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect(); // mount component
    return () => {
      connection.disconnect(); // unmount component
    };
  }, []); // when dependency declared there are updated mount component
  // ...
}    


Pass props to the child component 
-----------------------------------------
export default function Profile() {
  return (
    <Avatar
      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}
      size={100}
    />
  );
}

Manipulating the DOM with Refs
-----------------------------------------
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}


Accessing another component’s DOM nodes (you have to use forwardRef for it, IF you can access directly got a error cannot access)
-----------------------------------------
import { forwardRef, useRef } from 'react';

const MyInput = forwardRef((props, ref) => {
  return <input {...props} ref={ref} />;
});

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <MyInput ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}


video play and pause using ref method
-----------------------------------------
import { useState, useRef, useEffect } from 'react';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      ref.current.play();
    } else {
      ref.current.pause();
    }
  });

  return <video ref={ref} src={src} loop playsInline />;
}

export default function App() {
  const [isPlaying, setIsPlaying] = useState(false);
  return (
    <>
      <button onClick={() => setIsPlaying(!isPlaying)}>
        {isPlaying ? 'Pause' : 'Play'}
      </button>
      <VideoPlayer
        isPlaying={isPlaying}
        src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
      />
    </>
  );
}


Reusing Logic with Custom Hooks
-----------------------------------------
// custome hook defined it in app folder and create new folder customHook like component folder
// useCounter.js (it's a custom hook) 
    import { useState } from 'react';

    const useCounter = () => {
      const [count, setCount] = useState(0);

      const increment = () => {
        setCount(prevCount => prevCount + 1);
      };

      return { count, increment };
    };

    export default useCounter;


// ExampleComponent.js
    import React from 'react';
    import useCounter from './useCounter';

    const ExampleComponent = () => {
      const { count, increment } = useCounter();

      return (
        <div>
          <h1>Count: {count}</h1>
          <button onClick={increment}>Increment</button>
        </div>
      );
    };

    export default ExampleComponent;

Higher Order Component demo (HOC)
-----------------------------------------
import React, { useState } from "react";
function HigherOrderUpdatedComponent(OriginalComponent) { // its a HOC component
  function UpdatedComponent() {
    const [money, setMoney] = useState(10);
    const handleIncrease = () => {
      setMoney(money * 2);
    };
    return <OriginalComponent handleIncrease={handleIncrease} money={money} />;
  }
  return UpdatedComponent;
}
export default HigherOrderUpdatedComponent;


function Person1({ money, handleIncrease }) {
  return (
    <>
      <h2>Jimmy is offering me $10 </h2>
      <button onclick={handleIncrease}>Increase Money</button>
    </>
  );
}
export default HigherOrderUpdatedComponent(Person1);


function Person2({ money, handleIncrease }) {
  return (
    <>
      <h2>John is offering me $10 </h2>
      <button onclick={handleIncrease}>Increase Money</button>
    </>
  );
}
export default HigherOrderUpdatedComponent(Person2);


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------


-----------------------------------------
