higher order component
mount, unmount, and updated mount component ( life cycle method)
forwardRef
Reusing Logic with Custom Hooks
useCallback Hook
useReducer hook
useContext hook
memo
useMemo hook
useDebugValue
useDeferredValue
useTransition
useLayoutEffect
useImperativeHandle
useInsertionEffect
useSyncExternalStore



Conditionally returning JSX 
-----------------------------------------
if (isPacked) {
  return <li className="item">{name} ✔</li>;
}
return <li className="item">{name}</li>;

Conditional (ternary) operator (? :) 
-----------------------------------------
return (
  <li className="item">
    {isPacked ? name + ' ✔' : name}
  </li>
);

Logical AND operator (&&) 
-----------------------------------------
return (
  <li className="item">
    {name} {isPacked && '✔'}
  </li>
);

switch case operator for multiple conditional renderings
-----------------------------------------
function Notification({ text, status }) {
  switch (status) {
    case 'info':
      return <Info text={text} />;
    case 'warning':
      return <Warning text={text} />;
    case 'error':
      return <Error text={text} />;
    default:
      return null;
  }
}

NESTED CONDITIONAL RENDERING IN REACT
-----------------------------------------
function List({ list }) {
  const isNotAvailable = !list;
  const isEmpty = !list.length;

  return (
    <div>
      {isNotAvailable
        ? <p>Sorry, the list is not there.</p>
        : (isEmpty
          ? <p>Sorry, the list is empty.</p>
          : <div>{list.map(item => <Item item={item} />)}</div>
        )
      }
    </div>
  
CONDITIONAL RENDERING WITH HOC
-----------------------------------------
// higher-order component is a function that takes a component as an argument and returns a new component that wraps the original component.


1. Creating the Counter Component

  import React, { useState } from 'react';

  const Counter = () => {
    const [count, setCount] = useState(0);

    return (
      <div style={{ padding: '20px', textAlign: 'center' }}>
        <p>Count: {count}</p>
        <button onClick={() => setCount(count + 1)}>Increment</button>
        <button onClick={() => setCount(count - 1)}>Decrement</button>
        <button onClick={() => setCount(0)}>Reset</button>
      </div>
    );
  };

  export default Counter;


2. Creating the withBackgroundColor HOC

  import React from 'react';

  const withBackgroundColor = (WrappedComponent, backgroundColor) => {
    return (props) => {
      const style = {
        backgroundColor: backgroundColor,
        padding: '20px',
        borderRadius: '8px',
        margin: '10px',
      };

      return (
        <div style={style}>
          <WrappedComponent {...props} />
        </div>
      );
    };
  };

  export default withBackgroundColor;


3. Wrapping the Counter Component with Different Colors

import React from 'react';
import Counter from './Counter';
import withBackgroundColor from './withBackgroundColor';

// Create Counter components with different background colors
const RedCounter = withBackgroundColor(Counter, 'red');
const GreenCounter = withBackgroundColor(Counter, 'green');
const BlueCounter = withBackgroundColor(Counter, 'blue');

const App = () => {
  return (
    <div style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>
      <RedCounter />
      <GreenCounter />
      <BlueCounter />
    </div>
  );
};

export default App;


CONDITIONAL RENDERING IN REACT: IF
-----------------------------------------
function List({ list }) {
  if (!list) {
    return null;
  }

  return (
    <ul>
      {list.map(item => (
        <Item key={item.id} item={item} />
      ))}
    </ul>
  );
}

CONDITIONAL RENDERING IN REACT: IF ELSE
-----------------------------------------
function List({ list }) {
  if (!list) {
    return null;
  }

  if (!list.length) {
    return <p>Sorry, the list is empty.</p>;
  } else {
    return (
      <div>
        {list.map(item => (
          <Item item={item} />
        ))}
      </div>
    );
  }
}
    
mount, unmount, and updated mount component ( life cycle method)
-----------------------------------------
function ChatRoom() {
  useEffect(() => {
    const connection = createConnection(serverUrl, roomId);
    connection.connect(); // mount component or componentDidMount
    return () => {
      connection.disconnect(); // unmount component or componentWillUnmount
    };
  }, []); // when dependency declared there are updated mount component or componentDidUpdate
  // ...
}    


Pass props to the child component 
-----------------------------------------
export default function Profile() {
  return (
    <Avatar
      person={{ name: 'Lin Lanying', imageId: '1bX5QH6' }}
      size={100}
    />
  );
}


Child to parent Data transfer
-----------------------------------------
  // ParentComponent.js
      import React, { useState } from 'react';
      import ChildComponent from './ChildComponent';
      
      function ParentComponent() {
          const [dataFromChild, setDataFromChild] = useState('');
      
          const handleDataFromChild = (data) => {
              setDataFromChild(data);
          };
      
          return (
              <div>
                  <ChildComponent sendDataToParent={handleDataFromChild} />
                  <p>Data from child component: {dataFromChild}</p>
              </div>
          );
      }
      
      export default ParentComponent;

  // ChildComponent.js
      import React from 'react';
      function ChildComponent({ sendDataToParent }) {
          const sendData = () => {
              const data = 'Hello, Parent!';
              sendDataToParent(data); // Call the function passed from the parent with the data
          };
      
          return (
              <div>
                  <button onClick={sendData}>Send Data to Parent</button>
              </div>
          );
      }
      export default ChildComponent;




Manipulating the DOM with Refs
-----------------------------------------
import { useRef } from 'react';

export default function Form() {
  const inputRef = useRef(null);

  function handleClick() {
    inputRef.current.focus();
  }

  return (
    <>
      <input ref={inputRef} />
      <button onClick={handleClick}>
        Focus the input
      </button>
    </>
  );
}


forwardRef
-----------------------------------------
// Accessing another component’s DOM nodes (you have to use forwardRef for it, IF you can access directly got a error cannot access)

// forwardRef is a function that allows you to pass a ref from a parent component to a child component. This is useful when you need to access the DOM element of a child component or a child component needs to expose some of its internals to the parent.


    1. Creating a FancyButton Component.
        import React, { forwardRef } from 'react';
          // FancyButton component using forwardRef
          const FancyButton = forwardRef((props, ref) => {
            return (
              <button ref={ref} className="fancy-button">
                {props.children}
              </button>
            );
          });

        export default FancyButton;


    2. Using the FancyButton Component with a Ref
        import React, { useRef } from 'react';
        import FancyButton from './FancyButton';

        const App = () => {
          const buttonRef = useRef(null);

          const handleClick = () => {
            if (buttonRef.current) {
              buttonRef.current.style.backgroundColor = 'yellow'; // Change background color on click
              buttonRef.current.focus(); // Focus the button
            }
          };

          return (
            <div>
              <FancyButton ref={buttonRef}>Click Me!</FancyButton>
              <button onClick={handleClick}>Change FancyButton Style</button>
            </div>
          );
        };

        export default App;




video play and pause using ref method
-----------------------------------------
import { useState, useRef, useEffect } from 'react';

function VideoPlayer({ src, isPlaying }) {
  const ref = useRef(null);

  useEffect(() => {
    if (isPlaying) {
      ref.current.play();
    } else {
      ref.current.pause();
    }
  });

  return <video ref={ref} src={src} loop playsInline />;
}

export default function App() {
  const [isPlaying, setIsPlaying] = useState(false);
  return (
    <>
      <button onClick={() => setIsPlaying(!isPlaying)}>
        {isPlaying ? 'Pause' : 'Play'}
      </button>
      <VideoPlayer
        isPlaying={isPlaying}
        src="https://interactive-examples.mdn.mozilla.net/media/cc0-videos/flower.mp4"
      />
    </>
  );
}


Reusing Logic with Custom Hooks
-----------------------------------------
// Custom hooks in React are functions that allow you to reuse logic across multiple components. They are a way to extract and share code that deals with stateful logic using React hooks like useState, useEffect, useContext, and others.

// custome hook defined it in app folder and create new folder customHook like component folder
// useCounter.js (it's a custom hook) // custome hook create with start use keyword like: useCounter
    import { useState } from 'react';

    const useCounter = () => {
      const [count, setCount] = useState(0);

      const increment = () => {
        setCount(prevCount => prevCount + 1);
      };

      return { count, increment };
    };

    export default useCounter;


// ExampleComponent.js
    import React from 'react';
    import useCounter from './useCounter';

    const ExampleComponent = () => {
      const { count, increment } = useCounter();

      return (
        <div>
          <h1>Count: {count}</h1>
          <button onClick={increment}>Increment</button>
        </div>
      );
    };

    export default ExampleComponent;




memo
-----------------------------------------
// Memo lets you skip re-rendering a component when its props are unchanged.

import React from "react";
import { memo } from 'react';

const MyComponent = memo((props) => {
  // component logic here
});

export default MyComponent;



useMemo hook
-----------------------------------------
// The React useMemo Hook returns a memoized value. The useMemo Hook only runs when one of its dependencies is updated.

  import React, { useState, useMemo } from 'react';
  
  const MyComponent = () => {
    const [number, setNumber] = useState(0);
    
    // Define a memoized value using useMemo
    const squaredNumber = useMemo(() => {
      console.log("Calculating squared number...");
      return number * number;
    }, [number]); // Recalculate only when 'number' changes
    
    return (
      <div>
        <h2>Number: {number}</h2>
        <button onClick={() => setNumber(prev => prev + 1)}>Increment Number</button>
        <h2>Squared Number: {squaredNumber}</h2>
      </div>
    );
  };
  
  export default MyComponent;



useCallback Hook
-----------------------------------------
// The React useCallback Hook returns a memoized callback function. The useCallback Hook only runs when one of its dependencies updated.
// Formulla : useCallback(fn, dependencies) 

Callback.js
-----------
    import { useCallback, useState } from "react";
    import Todos from "../components/Todos";

    const Callbackhook = () => {
      const [count, setCount] = useState(0);
      const [todos, setTodos] = useState([]);

      const increment = () => {
        setCount(count + 1);
      };

      const addTodo = useCallback(() => {
        setTodos((prev) => [...prev, `new Entry`]);
      }, [todos]);

      // const addTodo = () => {
      //   setTodos((prev) => [...prev, `new Entry`]);
      // };

      // subscribe to thapa technical

      return (
        <>
          <Todos todos={todos} addTodo={addTodo} />
          <hr />
          <div>
            Count: {count}
            <button onClick={increment}>+</button>
          </div>
        </>
      );
    };

    export default Callbackhook;

todos.js 
--------
    import { memo } from "react";

    const Todos = ({ todos, addTodo }) => {
      console.log("child render");
      return (
        <>
          <h2>My Todos</h2>
          {todos.map((todo, index) => {
            return <p key={index}>{todo + index}</p>;
          })}

          <button onClick={addTodo}>Add Todo</button>
        </>
      );
    };

    export default memo(Todos);



Difference between useMemo and useCallback hook
-----------------------------------------------

    useMemo: Used to memoize the result of a function.
    useCallback: Used to memoize a function itself.
    
     // Usage:
    
    useMemo: Use when you have expensive calculations that you don't want to repeat unless necessary.
    useCallback: Use when you need to prevent a function from being recreated on every render, especially when passing it as a prop to child components.
    Return Value:
    
    // return 
    useMemo: Returns the memoized value.
    useCallback: Returns the memoized function.
    
    // When to Use Which:
    
    Use useMemo: When you have an expensive computation (like a large array or complex calculation) that you want to avoid recalculating unless necessary.
    Example: Filtering a large list, calculating derived data.
    
    Use useCallback: When you want to avoid unnecessary re-creations of a function that’s passed as a prop to a child component or used as a dependency in useEffect.
    Example: Passing a click handler to a child component that relies on stable references to avoid re-renders.



useReducer hook
-----------------------------------------
// useReducer is very similar to useState, when we have more that one value we can use useReducer hook

import { useReducer } from "react";

const initialState = 0;

function reducer(state, action) {
  if (action.type === "INCREMENT") {
    return state + 1;
  }
  if (action.type === "DECREMENT") {
    return state - 1;
  }
  return state;
}

export default function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState); // useReducer hook take two arguments first reducer function and second is initialState and dispatch method trigger that action

  return (
    <>
      <button
        onClick={() => {
          dispatch({ type: "INCREMENT" });
        }}
      >
        Increment
      </button>

      <p>{state}</p>

      <button
        onClick={() => {
          dispatch({ type: "DECREMENT" });
        }}
      >
        Decrement
      </button>
    </>
  );
}



useContext hook
-----------------------------------------
// React Context is a way to manage state globally. It can be used together with the useState Hook to share state between deeply nested components more easily

  1. create context folder in root directory create productContext.js file

      productContext.js(File)
      -----------------------
        import { createContext, useContext, useEffect, useReducer } from "react";
        import reducer from "../reducer/ProductReducer";
  
        export const ProductContext = createContext();
  
        export const useProductContext = () => {
          return useContext(ProductContext);
        };
  
        const initialState = {
            products: [],
        };
        export const ProductContextProvider = ({ children }) => { // create custom hook here
        const [state, dispatch] = useReducer(reducer, initialState);
  
          return (
            <ProductContext.Provider value={{ ...state, }}> // also passed function like : getSingleProduct
              {children}
            </ProductContext.Provider>
          );
        };
  
  
  2. wrapped this for all js in index.js or layoutout.js or app.js file
  
      index.js(File)
      -----------------------
      import { ProductContextProvider } from "./context/ProductContext";
  
      const root = ReactDOM.createRoot(document.getElementById("root"));
      root.render(
        <React.StrictMode>
          <ProductContextProvider>
                <App />
          </ProductContextProvider>
        </React.StrictMode>
      );
  
  3. use directory in page
  
      page.js(File)
      -----------------------
      import { useProductContext } from "../context/ProductContext";
      
      const FeaturedProduct = () => {
        const { featuredProducts } = useProductContext();
        return (
          <>
            <div className="featured-section space bg-gray">
              <div className="container">
                <h2 className="main-title">Our Feature Services</h2>
                <div className="row">
                  {featuredProducts && featuredProducts.length > 0
                    ? featuredProducts.map((prod, index) => {
                        return <Product key={index} product={prod} />;
                      })
                    : "No Featured products found"}
                </div>
              </div>
            </div>
          </>
        );
      };
  
      export default FeaturedProduct;




useDebugValue
-----------------------------------------
// useDebugValue is a React Hook that lets you add a label to a custom Hook in React DevTools.

import { useDebugValue } from "react";

function useOnlineStatus() {
  useDebugValue(isOnline ? "Online" : "Offline");
}


useDeferredValue
-----------------------------------------
// React 18 comes with a number of concurrent features that you can just start using in your existing codebase as there is no concurrent mode anymore. One such feature is the new useDeferedValue hook so lets take a look.
// useDeferredValue is a React Hook that lets you defer updating a part of the UI.
// jab variable ki value bar bar change ho rahi ho, to ui print hone me time lagta he, us solution ke liye deffered value use hota he, deffered value bar bar update nahi hota he jab last me variable update hota he tab vo last me ui update karta he, jisse performance badti he

App.tsx
-------
    import React, { useDeferredValue, useState } from "react";
    import { Products } from "./List";

    function App() {
      const [value, setValue] = useState("");
      const handleChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {
        setValue(e.target.value);
      };

      const deferredValue = useDeferredValue(value);
      const isStale = deferredValue !== value;

      return (
        <div>
          <input
            style={{ color: isStale ? "dimgray" : "black" }}
            value={value}
            onChange={handleChange}
          />
          <Products searchTerm={deferredValue} />
        </div>
      );
    }

    export default App;

Products.tsx
------------
    import { useMemo } from "react";

    export function Products({ searchTerm }: { searchTerm: string }) {
      const items = useMemo(() => {
        return [...Array(10000)].map(
          () =>
            (searchTerm ? searchTerm + " " : "") + Math.floor(Math.random() * 10000)
        );
      }, [searchTerm]);

      return <List items={items} />;
    }


List.tsx
--------
    /**
     * This component is intentionally designed to be slow
     * - bad keys
     * - inline styles
     */
    function List({ items }: { items: string[] }) {
      return (
        <div>
          {items.map((product, i) => (
            <div
              key={i + product}
              style={{
                margin: "1rem 0",
                backgroundColor: "lightskyblue",
                borderRadius: "4px",
                boxShadow: "0 1px 4px rgba(0, 0, 0, 0.25)",
                padding: "10px",
              }}
            >
              {product}
            </div>
          ))}
        </div>
      );
    }



useTransition
-----------------------------------------
// useTransition is a React Hook that lets you update the state without blocking the UI.
// Formulla: const [isPending, startTransition] = useTransition()

import React, { useState, useTransition } from "react";

function UseTranstion() {
  const [items, setItems] = useState(["Item 1", "Item 2", "Item 3"]);
  const [isPending, startTransition] = useTransition({
    timeoutMs: 500
  });

  const handleItemClick = (index) => {
    startTransition(() => {
      setItems((prevItems) => {
        const updatedItems = [...prevItems];
        updatedItems.splice(index, 1);
        return updatedItems;
      });
    });
  };

  return (
    <ul>
      {items.map((item, index) => (
        <li key={index} onClick={() => handleItemClick(index)}>
          {item}
        </li>
      ))}
      {isPending && <div>Loading....</div>}
    </ul>
  );
}

export default UseTranstion;


useLayoutEffect
-----------------------------------------
// useLayoutEffect, runs synchronously after a render but before the screen is updated.
// useEffect runs asynchronously and after a render is painted to the screen.

import React, { useState, useLayoutEffect, useEffect } from "react";

const LayoutEffect = () => {
  const [num, setNum] = useState(0);

  useLayoutEffect(() => {
    if (num === 0) setNum(5 + Math.random() * 50);
  }, [num]);
  console.log("🚀 ~ file: LayoutEffect.jsx ~ line 9 ~ LayoutEffect ~ num", num);

  return (
    <>
      <h2>{num}</h2>
      <button onClick={() => setNum(0)}>check</button>
    </>
  );
};

export default LayoutEffect;



useImperativeHandle
-----------------------------------------
// parent component can Access the child component functions, variables using useImperativeHandle.
// formulla : useImperativeHandle(ref, createHandle, dependencies?)

Parent.js
--------
        import React, {forwordRef} from 'react';
        import Child from './Child';

        function Parent (props, ref) {
            const ref = useRef();
            return <div>
                <Child ref={ref} />
                <div>Parent Component</div>
                <button onClick={ref.current.sayHi()}>click</button>
            </div>
        }
        export default Parent;



Child.js
--------
        import React, {useImperativeHandle, forwordRef} from 'react';

        function Child (props, ref) {
            useImperativeHandle(ref, () => ({ 
                sayHi,
            }));

            const sayHi = () => {
                console.log("Hi, Everyone");
            }
            return <div>Child Component</div>
        }
        export default forwordRef(Child);



useInsertionEffect
-----------------------------------------
// useInsertionEffect allows inserting elements into the DOM before any layout effects fire.
// Formulla : useInsertionEffect(setup, dependencies?)

import {  useEffect, useInsertionEffect, useLayoutEffect, useState } from "react";

const UseInsertionEffectHook = () => {
    const [theme,setTheme] = useState('dark')
    
    useInsertionEffect(() => {
        const styleRule = getStyleRule(theme);

        document.head.appendChild(styleRule);

        return () => document.head.removeChild(styleRule)
    },[theme])

    return <button onClick={() => setTheme(theme === 'dark' ? 'white' : 'dark')}>Change theme</button>
}

const getStyleRule = theme =>{
    const tag = document.createElement('style')
    tag.innerHTML = `
        html,button {
            color : ${theme === 'dark' ? 'white' : 'black'};
            background-color : ${theme === 'dark' ? 'black' : 'white'};
            border : 1px solid ${theme === 'dark' ? 'white' : 'black'};
        }

    `

    return tag
}

export default UseInsertionEffectHook



useSyncExternalStore
-----------------------------------------
// useSyncExternalStore is a React Hook that lets you subscribe to an external store.
// Fromulla : const snapshot = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot?)

import React, {useSyncExternalStore} from 'react';

export default function App ()  {

    const width = useSyncExternalStore((listner) => {
        window.addEventListener('resize', listner)
        return window.removeEventListener('resize', listner)
    }, () => window.innerWidth);
    
    return <div>Size : {width}</div>
}


