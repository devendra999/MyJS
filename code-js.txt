1. checknotes function like atm machine
    function getDenominations(checkNotes, amount) {
        // Sort the denominations in descending order
        checkNotes.sort((a, b) => b - a);

        // Initialize the result object to store the count of each note
        let result = {};

        // Loop through each note denomination
        for (let note of checkNotes) {
            // If the note can be used, determine how many times it can fit into the amount
            if (amount >= note) {
                let count = Math.floor(amount / note); // How many notes of this denomination
                result[note] = count; // Store the count of this denomination in result
                amount -= count * note; // Reduce the amount accordingly
            }
        }

        // If amount is zero, return the result; otherwise, return an empty object (not enough notes)
        return amount === 0 ? result : {};
    }

    // Example usage:
    const checkNotes = [1000, 200, 500, 100];
    const amount = 2700;
    console.log(getDenominations(checkNotes, amount));


------------------------------------------
one by one value add and show that value in array
const array = [1, 5, 3, 7, 8];
output: [1,6,9,16,24]


const array = [1, 5, 3, 7, 8];
let sum = 0;
const output = array.map(num => sum += num);
console.log(output); // [1, 6, 9, 16, 24]

without js method ----
const array = [1, 5, 3, 7, 8];
let sum = 0;
const output = [];

for (let i = 0; i < array.length; i++) {
  sum += array[i];
  output.push(sum);
}

console.log(output); // [1, 6, 9, 16, 24]


------------------------------------------
1
2 3
4 5 6
7 8 9 10
print this with js


let num = 1;  // Start from 1

for (let i = 1; i <= 4; i++) {  // Loop for 4 rows
    let row = "";  // Create an empty row

    for (let j = 1; j <= i; j++) {  // Add numbers to the row
        row += num;  // Add the current number
        num++;  // Move to the next number
    }

    console.log(row);  // Print the row
}

------------------------------------------
let a = [2, 5, 6, 3, 8, 2, 6, 4];
// Output: [5, 2, 3, 6, 2, 8, 4, 6]


const swapPairs = (arr) => {
    const result = [...arr]; // Copy array to avoid modifying original
    let newResult = [];

    for (let i = 0; i < result.length - 1; i += 2) {
        newResult.push(result[i + 1], result[i]); // Push elements separately
    }

    console.log(newResult);
};

let a = [2, 5, 6, 3, 8, 2, 6, 4];
swapPairs(a);
// Output: [5, 2, 3, 6, 2, 8, 4, 6]



------------------------------------------



2. Find first unique character
function findFirstUniqueCharacter(str) {
  // Create an object to store the count of each character
  let charCount = {};

  // Count the occurrences of each character using for...of
  for (let char of str) {
    let lowerChar = char.toLowerCase();  // Convert to lowercase for case-insensitivity
    charCount[lowerChar] = (charCount[lowerChar] || 0) + 1;
  }

  // Loop through the string again to find the first unique character
  for (let char of str) {
    let lowerChar = char.toLowerCase();  // Convert to lowercase for case-insensitivity
    if (charCount[lowerChar] === 1) {
      return char;
    }
  }

  // Return null if no unique character is found
  return null;
}

// Example usage
console.log(findFirstUniqueCharacter('dDevendra')); // Output: 'v'


------------------------------------------
2.1 Find last unique character
function findLastUniqueChar(str) {
  const charCount = {};

  // Count the frequency of each character in the string
  for (let char of str) {
    charCount[char] = (charCount[char] || 0) + 1;
  }

  // Loop from the end to the beginning to find the last unique character
  for (let i = str.length - 1; i >= 0; i--) {
    if (charCount[str[i]] === 1) {
      return str[i];  // Return the last unique character
    }
  }

  return null; // If no unique character is found
}

console.log(findLastUniqueChar("swiss")); // Output: "i"
console.log(findLastUniqueChar("aabbcc")); // Output: null
------------------------------------------
3 Find nested array highest amount
let array1 = [[2, 3, 8], [4, 8, 19], [2, 5, 1]];
// output [8, 19, 5]


let array1 = [[2, 3, 8], [4, 8, 19], [2, 5, 1]];
let result = [];

for (let i = 0; i < array1.length; i++) {
  // Find the maximum number in the current sub-array
  let maxInSubArray = Math.max(...array1[i]);
  result.push(maxInSubArray);
}

console.log(result);  // Output: [8, 19, 5]

------------------------------------------
3.1 Find nested array highest amount without js method
let array1 = [[2, 3, 8], [4, 8, 19], [2, 5, 1]];

// Create an empty result array to store the highest values from each nested array
let result = [];

// Iterate over each nested array
for (let i = 0; i < array1.length; i++) {
    let currentArray = array1[i];
    let max = currentArray[0]; // Start with the first element as the initial max value
    
    // Iterate over each element in the current nested array to find the highest value
    for (let j = 1; j < currentArray.length; j++) {
        if (currentArray[j] > max) {
            max = currentArray[j];
        }
    }
    
    // Push the maximum value of the current nested array into the result array
    result.push(max);
}

// Output the result array
console.log(result); // Output: [8, 19, 5]

------------------------------------------




2. In JavaScript, how do you turn an Object into an Array []?
    let obj = { id: "1", name: "user22", age: "26", work: "programmer" };

    //Method 1: Convert the keys to Array using - Object.keys()
    console.log(Object.keys(obj));
    // ["id", "name", "age", "work"]

    // Method 2 Converts the Values to Array using - Object.values()
    console.log(Object.values(obj));
    // ["1", "user22r", "26", "programmer"]

    // Method 3 Converts both keys and values using - Object.entries()
    console.log(Object.entries(obj));
    //[["id", "1"],["name", "user22"],["age", "26"],["work", “programmer"]]



------------------------------------------
2. In JavaScript, how do you turn an array into an object {}?
const obj = ['1', 'user22', '26', 'programmer'];

const array = obj.reduce((acc, value, index) => {
  acc[index] = value;
  return acc;
}, {});

let obj = {};
for(let num in array) {
    obj[num] = array[num]
}

console.log(obj);
console.log(array);
// Output: { '0': '1', '1': 'user22', '2': '26', '3': 'programmer' }

------------------------------------------
3. Write the code to find the vowels
    const findVowels = str => {
      let count = 0
      const vowels = ['a', 'e', 'i', 'o', 'u']
      for(let char of str.toLowerCase()) {
        if(vowels.includes(char)) {
          count++
        }
      }
      return count
    }
    
------------------------------------------
3. Write the code to find the vowels
  const findVowels = str => {
    const vowelCount = {}
    const vowels = ['a', 'e', 'i', 'o', 'u']
    for (let char of str.toLowerCase()) {
      if (vowels.includes(char)) {
        // Increment the count for the vowel in the object
        vowelCount[char] = (vowelCount[char] || 0) + 1
      }
    }
    return vowelCount
  }

  console.log(findVowels('devendra')) // { e: 2, a: 1 }
------------------------------------------

1. Find the Second Largest Number in an Array

function findSecondLargest(arr) {
    // Remove duplicates to handle repeated values
    arr = [...new Set(arr)];

    // Sort the array in descending order
    arr.sort((a, b) => b - a);

    // Return the second largest number, or null if there is no second largest
    return arr.length >= 2 ? arr[1] : null;
}

// Example usage:
const numbers = [12, 35, 1, 10, 34, 1];
const secondLargest = findSecondLargest(numbers);
console.log(secondLargest);  // Output: 34


-----------------------------------------------

2. Check for Anagram (Write a function to check if two strings are anagrams (i.e., they contain the same characters, but possibly in different orders). Ignore spaces and case differences.)

console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'world')); // Output: false


function isAnagram(str1, str2) {
    // Remove spaces and convert to lowercase for case-insensitive comparison
    str1 = str1.replace(/\s+/g, '').toLowerCase();
    str2 = str2.replace(/\s+/g, '').toLowerCase();

    // If the lengths of the strings are different, they cannot be anagrams
    if (str1.length !== str2.length) {
        return false;
    }

    // Sort the characters of both strings and compare them
    const sortedStr1 = str1.split('').sort().join('');
    const sortedStr2 = str2.split('').sort().join('');

    return sortedStr1 === sortedStr2;
}

// Example usage:
console.log(isAnagram('listen', 'silent')); // Output: true
console.log(isAnagram('hello', 'world'));   // Output: false


-----------------------------------------------
how can I all name push in single array using this json
---
const arrayOfObjects = [
    {
        name: "Alice",
        age: 25,
        hobbies: ["reading", "traveling", "swimming"],  // Subnested list 1
        address: {
            street: "123 Main St",
            name: 'Alice 2',
            city: "Wonderland",
            zip: "12345",
            previousAddresses: [     // Subnested list 2 inside an object
                { street: "456 Oak Rd", city: "Dreamland", zip: "67890", name: "Alice 3" },
                { street: "789 Pine Ln", city: "Fantasy City", zip: "11223" }
            ]
        }
    },
    {
        name: "Bob",
        age: 30,
        hobbies: ["gaming", "hiking"],  // Subnested list 3
        address: {
            street: "101 Maple Ave",
            name: 'Bob 2',
            city: "Fairyland",
            zip: "54321",
            previousAddresses: [     // Subnested list 4 inside an object
                { street: "102 Cedar Blvd", city: "Utopia", zip: "99887" }
            ]
        }
    }
];

---
const names = [];

array.forEach((e) =>{
    names.push(e.name);
    
    if(e.address.name) {
        names.push(e.address.name);
    };
    
    if(e.address.previousAddresses) {
        e.address.previousAddresses.map((u) => {
            if(u.name) {
                names.push(u.name)
            }
        })
    };
} )

console.log(names);
-----------------------------------------------


3. Count the Number of Vowels in a String

console.log(countVowels('Hello World')); // Output: 3

function countVowels(str) {
    // Define the vowels
    const vowels = 'aeiouAEIOU';
    let count = 0;

    // Loop through the string and count vowels
    for (let char of str) {
        if (vowels.includes(char)) {
            count++;
        }
    }

    return count;
}

// Example usage:
console.log(countVowels('Hello World')); // Output: 3


-----------------------------------------------

4. Reverse a String Without Using Built-in Functions
console.log(reverseString('Hello')); // Output: 'olleH'

function reverseString(str) {
    let reversedStr = '';
    for (let i = str.length - 1; i >= 0; i--) {
        reversedStr += str[i];
    }
    return reversedStr;
}



function reverseString(str) {
    return str.split('').reverse().join('');
}

// Example usage:
console.log(reverseString('Hello')); // Output: 'olleH'

-----------------------------------------------

5. Find the Missing Number in an Array

console.log(findMissing([1, 2, 4, 5])); // Output: 3

function findMissing(arr) {
  const n = arr.length + 1; // The full length should be one more than the current length
  const expectedSum = (n * (n + 1)) / 2; // Sum of numbers from 1 to n using the formula (n * (n + 1)) / 2
  const actualSum = arr.reduce((sum, num) => sum + num, 0); // Sum of the numbers in the array
  return expectedSum - actualSum; // The difference will give the missing number
}

console.log(findMissing([1, 2, 4, 5])); // Output: 3


-----------------------------------------------
// Find the Longest String in an Array

function findLongestString(arr) {
    // If the array is empty, return an empty string
    if (arr.length === 0) {
      return "";
    }
  
    // Use the reduce method to find the longest string
    const longest = arr.reduce((longestStr, currentStr) => {
      // Compare the length of the current string with the longest string
      return currentStr.length > longestStr.length ? currentStr : longestStr;
    });
  
    return longest; // Return the longest string
  }
  
  // Example usage:
  const strings = ["apple", "banana", "kiwi", "strawberry", "orange"];
  const longestString = findLongestString(strings);
  console.log(longestString); // Output: "strawberry"
  
-----------------------------------------------

7. Find the Longest Substring Without Repeating Characters
console.log(longestUniqueSubstring("abcabcbb")); // Output: 3 (substring "abc")

function longestUniqueSubstring(str) {
    let start = 0;
    let maxLength = 0;
    let seenChars = new Map();

    for (let end = 0; end < str.length; end++) {
        const char = str[end];
        
        // If the character is already in the map, move the start pointer
        if (seenChars.has(char)) {
            start = Math.max(seenChars.get(char) + 1, start);
        }
        
        // Update the character's most recent index in the map
        seenChars.set(char, end);
        
        // Calculate the length of the current substring and update the maxLength
        maxLength = Math.max(maxLength, end - start + 1);
    }

    return maxLength;
}

// Test the function
console.log(longestUniqueSubstring("abcabcdb")); // Output: 4 (substring "abcd")


-----------------------------------------------

8. Check if a Number is Prime
console.log(isPrime(7)); // Output: true
console.log(isPrime(10)); // Output: false


function isPrime(num) {
    if (num <= 1) {
        return false; // 0 and 1 are not prime numbers
    }

    for (let i = 2; i <= Math.sqrt(num); i++) {
        if (num % i === 0) {
            return false; // num is divisible by i, so it's not prime
        }
    }

    return true; // num is prime
}

// Test the function
console.log(isPrime(7));  // Output: true
console.log(isPrime(10)); // Output: false



-----------------------------------------------

10. Remove Duplicate Characters from a String
console.log(removeDuplicates('aabbccdeff')); // Output: 'abcdef'

function removeDuplicates(str) {
    // Create a Set to store unique characters
    let uniqueChars = new Set(str);
    
    // Convert the Set back to a string
    return [...uniqueChars].join('');
}

console.log(removeDuplicates('aabbccdeff')); // Output: 'abcdef'


-----------------------------------------------

1. Find the Factorial of a Number
console.log(factorial(5)); // Output: 120 (5*4*3*2*1)

//  The function uses recursion to calculate the factorial.

function factorial(num) {
    // Base case: if num is 0 or 1, return 1
    if (num === 0 || num === 1) {
        return 1;
    }
    
    // Recursive case: num * factorial of (num - 1)
    return num * factorial(num - 1);
}

console.log(factorial(5)); // Output: 120


-----------------------------------------------

2. Find the Frequency of Each Character in a String
console.log(charFrequency('apple')); // Output: {a: 1, p: 2, l: 1, e: 1}

function charFrequency(str) {
    let freq = {};

    // Loop through each character in the string
    for (let char of str) {
        // If the character is not already in the freq object, add it with value 1
        // Otherwise, increment its value by 1
        freq[char] = (freq[char] || 0) + 1;
    }

    return freq;
}

console.log(charFrequency('apple')); // Output: {a: 1, p: 2, l: 1, e: 1}


-----------------------------------------------

6. Find the Common Elements Between Two Arrays
console.log(findCommonElements([1, 2, 3], [2, 3, 4])); // Output: [2, 3]


function findCommonElements(arr1, arr2) {
  // Use filter() to get common elements between arr1 and arr2
  return arr1.filter(element => arr2.includes(element));
}

// Example usage:
console.log(findCommonElements([1, 2, 3], [2, 3, 4]));  // Output: [2, 3]


-----------------------------------------------

12. Find the First Repeated Character in a String
console.log(firstRepeatedCharacter('abcbdca')); // Output: 'b'

function firstRepeatedCharacter(str) {
  // Create an empty Set to track the characters we've seen
  let seen = new Set();

  // Loop through each character in the string
  for (let char of str) {
    // If the character is already in the Set, it's the first repeated character
    if (seen.has(char)) {
      return char;
    }
    // Otherwise, add the character to the Set
    seen.add(char);
  }

  // If no repeated character is found, return null or a message
  return null;
}

// Example usage:
console.log(firstRepeatedCharacter('abcbdca'));  // Output: 'b'

-----------------------------------------------

14. Find All Divisors of a Number
console.log(findDivisors(12)); // Output: [1, 2, 3, 4, 6, 12]

function findDivisors(num) {
  let divisors = [];
  
  // Loop through numbers from 1 to num
  for (let i = 1; i <= num; i++) {
    // Check if i is a divisor of num
    if (num % i === 0) {
      divisors.push(i); // If so, add i to the divisors array
    }
  }

  return divisors;
}

// Example usage:
console.log(findDivisors(12)); // Output: [1, 2, 3, 4, 6, 12]


-----------------------------------------------
16. Find the Longest Word in a String
console.log(longestWord('The quick brown fox')); // Output: 'quick'

function longestWord(str) {
  // Split the string into an array of words
  let words = str.split(' ');

  // Initialize a variable to store the longest word
  let longest = '';

  // Loop through the words and update the longest word
  for (let word of words) {
    if (word.length > longest.length) {
      longest = word;
    }
  }

  return longest;
}

// Example usage:
console.log(longestWord('The quick brown fox')); // Output: 'quick'


-----------------------------------------------
17. Count the Number of Even and Odd Numbers in an Array
console.log(countEvenOdd([1, 2, 3, 4, 5])); // Output: { even: 2, odd: 3 }

function countEvenOdd(arr) {
  let result = { even: 0, odd: 0 };  // Initialize counters for even and odd numbers

  // Loop through the array and check each number
  for (let num of arr) {
    if (num % 2 === 0) {
      result.even++;  // Increment even count if the number is even
    } else {
      result.odd++;   // Increment odd count if the number is odd
    }
  }

  return result;  // Return an object with the count of even and odd numbers
}

// Example usage:
console.log(countEvenOdd([1, 2, 3, 4, 5]));  // Output: { even: 2, odd: 3 }


-----------------------------------------------
18. Find the Index of the First Occurrence of a Character
Write a function to return the index of the first occurrence of a character in a string. If not found, return -1.

console.log(firstIndex('hello', 'l')); // Output: 2

function firstIndex(str, char) {
    return str.indexOf(char);
  }
  
  console.log(firstIndex('hello', 'l')); // Output: 2
  


-----------------------------------------------
20. Find the Longest Consecutive Sequence in an Array
Write a function that finds the length of the longest consecutive sequence of numbers in an unsorted array.

console.log(longestConsecutiveSequence([100, 4, 200, 1, 3, 2])); // Output: 4 (1, 2, 3, 4)

function longestConsecutiveSequence(nums) {
    if (nums.length === 0) return 0;
  
    // Sort the array
    nums.sort((a, b) => a - b);
  
    let longest = 1;
    let currentStreak = 1;
  
    for (let i = 1; i < nums.length; i++) {
      // If the current number is the same as the previous, skip it
      if (nums[i] === nums[i - 1]) continue;
  
      // If the current number is consecutive to the previous one, increase the streak
      if (nums[i] === nums[i - 1] + 1) {
        currentStreak++;
      } else {
        // Otherwise, reset the streak
        longest = Math.max(longest, currentStreak);
        currentStreak = 1;
      }
    }
  
    // Check the last streak
    return Math.max(longest, currentStreak);
  }
  
  console.log(longestConsecutiveSequence([100, 4, 200, 1, 3, 2])); // Output: 4 (1, 2, 3, 4)
  

-----------------------------------------------
// Flatten Nested Arrays

function flattenArray(arr) {
    return arr.reduce((flat, item) => flat.concat(Array.isArray(item) ? flattenArray(item) : item), []);
}

const nestedArray = [1, [2, [3, 4], 5], [6, 7], 8];
const flattened = flattenArray(nestedArray);

console.log(flattened); // Output: [1, 2, 3, 4, 5, 6, 7, 8]


-----------------------------------------------
17. Capitalize First Letter of Each Word
function capitalizeFirstLetterOfEachWord(str) {
    // Split the string into words using space as a separator
    const words = str.split(' ');
  
    // Capitalize the first letter of each word and keep the rest of the letters in lowercase
    const capitalizedWords = words.map(word => {
      // Capitalize the first letter and combine with the rest of the word
      return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
    });
  
    // Join the words back into a single string with spaces between them
    return capitalizedWords.join(' ');
  }
  
  // Example usage:
  const result = capitalizeFirstLetterOfEachWord("hello world from javascript");
  console.log(result); // Output: "Hello World From Javascript"
  

-----------------------------------------------
// 18. Convert String to Camel Case
function convertToCamelCase(str) {
    // Split the string into words using non-alphanumeric characters as separators (e.g., spaces, underscores, hyphens)
    const words = str.split(/[^a-zA-Z0-9]+/);
  
    // Convert the first word to lowercase and capitalize the first letter of subsequent words
    const camelCaseString = words.map((word, index) => {
      if (index === 0) {
        // The first word remains in lowercase
        return word.toLowerCase();
      } else {
        // Capitalize the first letter of the subsequent words and make the rest lowercase
        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();
      }
    }).join('');
  
    return camelCaseString;
  }
  
  // Example usage:
  const result = convertToCamelCase("convert-to camel_case-example");
  console.log(result); // Output: "convertToCamelCaseExample"

-----------------------------------------------
// Convert Object to Query String
  function objectToQueryString(obj) {
    // Create an array of key-value pairs, where each pair is encoded as a string "key=value"
    const queryString = Object.keys(obj)
      .map(key => {
        // Encode both key and value to handle special characters like spaces or & symbols
        return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);
      })
      .join('&'); // Join all pairs with '&' to form the full query string
  
    return queryString;
  }
  
  // Example usage:
  const params = {
    name: "Alice",
    age: 25,
    city: "New York"
  };
  
  const queryString = objectToQueryString(params);
  console.log(queryString); // Output: "name=Alice&age=25&city=New%20York"

-----------------------------------------------
// Count Words in a String
function countWords(str){
    let a = str.split(' ');
    console.log(a.length);
}

const wordCount = countWords("Hello world! This is a test.");
console.log(wordCount); // Output: 6
-----------------------------------------------
  // Find Index of Object by Key in Array

  function findIndexByKey(arr, key, value) {
    // Use the findIndex method to search for the index of the object
    const index = arr.findIndex(obj => obj[key] === value);
  
    return index; // If the object is found, it returns the index, otherwise returns -1
  }
  
  // Example usage:
  const users = [
    { id: 1, name: "Alice" },
    { id: 2, name: "Bob" },
    { id: 3, name: "Charlie" }
  ];
  
  // Find index of object with name "Bob"
  const index = findIndexByKey(users, "name", "Bob");
  console.log(index); // Output: 1
  
  // Try finding an object that doesn't exist
  const missingIndex = findIndexByKey(users, "name", "Eve");
  console.log(missingIndex); // Output: -1

-----------------------------------------------
// Get Random Item from Array

function getRandomItem(arr) {
  return arr[Math.floor(Math.random() * arr.length)];
}

-----------------------------------------------
// 50. Remove Item by Index from Array

function removeItemByIndex(arr, index) {
  arr.splice(index, 1);
  return arr;
}

-----------------------------------------------
// 66. Remove Whitespace from String
function countWords(str){
    let a = str.trim();
    let b = a.split(' ');
    console.log(b.join(''));
}

countWords('dfd df df df     ');
-----------------------------------------------
// Check if Array Contains All Values

function containsAllValues(arr, values) {
    // Check if every value in the 'values' array is included in the 'arr'
    return values.every(value => arr.includes(value));
  }
  
  // Example usage:
  const array = [1, 2, 3, 4, 5];
  const valuesToCheck = [2, 4];
  
  console.log(containsAllValues(array, valuesToCheck)); // Output: true
  
  const valuesToCheck2 = [2, 6];
  console.log(containsAllValues(array, valuesToCheck2)); // Output: false
-----------------------------------------------
// Remove All Occurrences of an Item in Array

function removeAllOccurrences(arr, item) {
    // Use the filter method to return a new array without the specified item
    return arr.filter(element => element !== item);
  }
  
  // Example usage:
  const array = [1, 2, 3, 4, 2, 5, 2];
  const updatedArray = removeAllOccurrences(array, 2);
  console.log(updatedArray); // Output: [1, 3, 4, 5]
  
-----------------------------------------------
// Find the Average of an Array
function findAverage(arr) {
    
    // If the array is empty, return NaN (not a number) since average can't be calculated
    if (arr.length === 0) {
      return NaN;
    }
  
    // Calculate the sum of all elements in the array
    const sum = arr.reduce((total, current) => total + current, 0);
  
    // Calculate and return the average by dividing the sum by the number of elements
    const average = sum / arr.length;
  
    return average;
  }
  
  // Example usage:
  const numbers = [10, 20, 30, 40, 50, 60];
  const average = findAverage(numbers);
  console.log(average); // Output: 30

-----------------------------------------------
// random number
/**
 * Generates a random 4-digit number
 * @returns {number} A random 4-digit number
 */
function generateRandomFourDigit() {
    // Generate a random number between 1000 and 9999
    const randomNumber = Math.floor(Math.random() * 9000) + 1000;
  
    // Return the generated 4-digit number
    return randomNumber;
  }
  
  // Example usage:
  const random4Digit = generateRandomFourDigit();
  console.log("Random 4-digit number:", random4Digit);

-----------------------------------------------
//11. Find Object by Key in Array

// Function to find an object by a specific key-value pair
function findObjectByKey(arr, key, value) {
    return arr.find(obj => obj[key] === value);
}

// Array of objects (this could be any dataset)
const users = [
    { id: 1, name: "Alice", age: 25, email: "alice@example.com" },
    { id: 2, name: "Bob", age: 30, email: "bob@example.com" },
    { id: 3, name: "Charlie", age: 35, email: "charlie@example.com" },
    { id: 4, name: "Diana", age: 28, email: "diana@example.com" }
];

// 1. Find by name
const userByName = findObjectByKey(users, "name", "Bob");
console.log("User with name 'Bob':", userByName);

// 2. Find by age
const userByAge = findObjectByKey(users, "age", 35);
console.log("User with age 35:", userByAge);

// 3. Find by email
const userByEmail = findObjectByKey(users, "email", "alice@example.com");
console.log("User with email 'alice@example.com':", userByEmail);

// 4. Find by id (unique identifier)
const userById = findObjectByKey(users, "id", 4);
console.log("User with ID 4:", userById);

// 5. Case where no match is found
const userNotFound = findObjectByKey(users, "name", "Eve");
console.log("User with name 'Eve':", userNotFound); // undefined, because there's no user named 'Eve'

// 6. Using with different key
const userWithLongEmail = findObjectByKey(users, "email", "charlie@example.com");
console.log("User with email 'charlie@example.com':", userWithLongEmail);



-----------------------------------------------
// Repeat a String N Times

/**
 * Repeats a string N times.
 * @param {string} str - The string to repeat.
 * @param {number} n - The number of times to repeat the string.
 * @returns {string} The string repeated N times.
 */
function repeatString(str, n) {
    // If n is less than or equal to 0, return an empty string
    if (n <= 0) {
      return '';
    }
  
    // Use the repeat() method to repeat the string N times
    return str.repeat(n);
  }
  
  // Example usage:
  const repeatedString = repeatString("hello ", 3);
  console.log(repeatedString); // Output: "hello hello hello "
  
-----------------------------------------------
// check year is leap year or not
/**
 * Checks if a given year is a leap year.
 * @param {number} year - The year to check.
 * @returns {boolean} True if the year is a leap year, false otherwise.
 */
function isLeapYear(year) {
    // A year is a leap year if:
    // 1. It is divisible by 4, and
    // 2. It is not divisible by 100, unless it is also divisible by 400.
    
    if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {
      return true; // It is a leap year
    } else {
      return false; // It is not a leap year
    }
  }
  
  // Example usage:
  console.log(isLeapYear(2020)); // Output: true
  console.log(isLeapYear(2021)); // Output: false
  console.log(isLeapYear(2000)); // Output: true
  console.log(isLeapYear(1900)); // Output: false
  
-----------------------------------------------














































// logical output

4. what is outplut
    let arr = [1, 2, 3, 4]; 
    arr.splice(1, 2, 10, 20, 54, 121, 454); // first parameter is startIndex, second is remove Element index, rest is add overthere 
    output: [1,  10, 20, 54, 121, 454,  4] 

------------------------------------------


4. what is outplut
function sayHi() {
  console.log(name); //undefined 
  console.log(age); // ReferenceError
  var name = 'Lydia';
  let age = 21;
}
sayHi();



------------------------------------------

4. what is outplut
const shape = {
  radius: 10,
  diameter() {
    return this.radius * 2;
  },
  perimeter: () => 2 * Math.PI * this.radius,
};

console.log(shape.diameter());  // 20
console.log(shape.perimeter()); // NaN - With arrow functions, the this keyword refers to its current surrounding scope, unlike regular functions! This means that when we call perimeter, it doesn't refer to the shape object, but to its surrounding scope (window for example).


------------------------------------------

4. what is outplut
let a = 3;
let b = new Number(3);
let c = 3;
// new Number() is a built-in function constructor. Although it looks like a number, it's not really a number: it has a bunch of extra features and is an object.
console.log(a == b); // true
console.log(a === b); // false
console.log(b === c); // false


------------------------------------------


let greeting;
greetign = {}; // Typo!
console.log(greetign); // {}




------------------------------------------
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}

const lydia = new Person('Lydia', 'Hallie');
const sarah = Person('Sarah', 'Smith');

console.log(lydia); // Person {firstName: "Lydia", lastName: "Hallie"}
console.log(sarah); // undefined

For sarah, we didn't use the new keyword. When using new, this refers to the new empty object we create. However, if you don't add new, this refers to the global object!
------------------------------------------


let number = 0;
console.log(number++); // 0  
console.log(++number); // 2
console.log(number); // 2


------------------------------------------


function checkAge(data) {
  if (data === { age: 18 }) {
    console.log('You are an adult!');
  } else if (data == { age: 18 }) {
    console.log('You are still an adult.');
  } else {
    console.log(`Hmm.. You don't have an age I guess`);
  }
}

checkAge({ age: 18 });

// The two objects that we are comparing don't have that: the object we passed as a parameter refers to a different location in memory than the object we used in order to check equality.

------------------------------------------
function getAge(...args) {
  console.log(typeof args);
}

getAge(21);
// The rest parameter (...args) lets us "collect" all remaining arguments into an array. An array is an object, so typeof args returns "object"

------------------------------------------
function getAge() {
  'use strict';
  age = 21;
  console.log(age); // ReferenceError
}

getAge();

------------------------------------------
const obj = { 1: 'a', 2: 'b', 3: 'c' };
const set = new Set([1, 2, 3, 4, 5]);

obj.hasOwnProperty('1'); //  true
obj.hasOwnProperty(1); //  true
set.has('1'); // false - in set get as a numeric
set.has(1); // true

------------------------------------------

const obj = { a: 'one', b: 'two', a: 'three' };
console.log(obj); // { a: "three", b: "two" }
// If you have two keys with the same name, the key will be replaced. It will still be in its first position, but with the last specified value.
------------------------------------------
for (let i = 1; i < 5; i++) {
  if (i === 3) continue;
  console.log(i); // 1,2,4
}

------------------------------------------
const person = { name: 'Lydia' };

function sayHi(age) {
  return `${this.name} is ${age}`;
}

console.log(sayHi.call(person, 21)); // D: Lydia is 21 
console.log(sayHi.bind(person, 21)); // function
// With both, we can pass the object to which we want the this keyword to refer to. However, .call is also executed immediately!
// .bind. returns a copy of the function, but with a bound context! It is not executed immediately.
------------------------------------------
const numbers = [1, 2, 3];
numbers[10] = 11;
console.log(numbers); // [1, 2, 3, empty x 7, 11]
------------------------------------------
(() => {
  let x, y;
  try {
    throw new Error();
  } catch (x) {
    (x = 1), (y = 2);
    console.log(x); // 1
  }
  console.log(x); // undefined
  console.log(y); // 2
})();
------------------------------------------
let person = { name: 'Lydia' };
const members = [person];
person = null;

console.log(members); // [{ name: "Lydia" }]
// We are only modifying the value of the person variable, and not the first element in the array, since that element has a different (copied) reference to the object.
------------------------------------------


------------------------------------------
------------------------------------------
------------------------------------------
------------------------------------------







var a = 10;
var b = a;
a = 20;

console.log(b); // 10
// The variable b is assigned the value of a before a is updated. Since JavaScript assigns primitive values by value, b gets a copy of a's value (10) and is unaffected by any later changes to a.

----------------------------
const obj = {
  x: 10,
  y: 20
};

const { x, ...rest } = obj;

console.log(x); // 10
console.log(rest); // { y: 20 }

// Destructuring and Rest Operator: The x is destructured from the object and stored in a variable x. The rest operator (...rest) collects the remaining properties into a new object (rest), which in this case is { y: 20 }.


----------------------------
function outer() {
  let a = 5;

  function inner() {
    console.log(a);
  }

  return inner;
}

const innerFunc = outer();
innerFunc(); // 5

// Closure: The inner function forms a closure that retains access to variables from its enclosing scope, even after the outer function has finished executing. Here, inner has access to the variable a from the outer function, so when innerFunc() is called, it logs 5.

----------------------------
const foo = {
  bar: 1,
  func: function() {
    setTimeout(() => {
      this.bar++;
      console.log(this.bar);
    }, 1000);
  }
};

foo.func(); // 2

// Arrow Function and this: The arrow function does not have its own this context; instead, it inherits this from its enclosing scope. Since foo.func() is invoked on the foo object, the arrow function inside setTimeout will have the same this as foo. Hence, this.bar refers to foo.bar, and after one second, it is incremented to 2, which is then logged.



write a program to find element occurrence in array
----------------------------
function countOccurrences(arr) {
  let occurrenceCount = {};

  // Loop through the array and count occurrences of each element
  for (let i = 0; i < arr.length; i++) {
    let element = arr[i];
    // If the element is already in the object, increment its count, otherwise set to 1
    occurrenceCount[element] = occurrenceCount[element] ? occurrenceCount[element] + 1 : 1;
  }

  return occurrenceCount;
}

// Example usage
let arr = [1, 2, 2, 3, 4, 4, 4, 5, 6, 1, 2];
let result = countOccurrences(arr);
console.log(result);




write a program to remove duplicate item from an array
----------------------------
function removeDuplicates(arr) {
    return [...new Set(arr)];
}

// Example usage
let arr = [1, 2, 2, 3, 4, 4, 5, 6, 1];
let result = removeDuplicates(arr);
console.log(result);



write a program for following output: mul(2)(4)(6)
----------------------------
function mul(x) {
    let result = x;

    // Returning a function that will accept the next value and accumulate the result
    function inner(y) {
        result *= y;  // Multiply the current result by the new value
        return inner;  // Return the inner function to allow chaining
    }
    
    // This is the base function that starts the chain
    inner.toString = function() {
        return result;  // Override the toString method to return the current result when logged
    };
    
    return inner;
}

console.log(mul(2)(4)(6));  // This will output 48


write a program to mulitply two number without using multiply sign  in javascript
----------------------------
function multiply(a, b) {
    let result = 0;
    
    // Loop b times and add a to the result each time
    for (let i = 0; i < Math.abs(b); i++) {
        result += a;
    }
    
    // If b is negative, negate the result
    if (b < 0) {
        result = -result;
    }
    
    return result;
}

console.log(multiply(3, 4));  // Outputs 12
console.log(multiply(5, -2)); // Outputs -10
console.log(multiply(-3, -3)); // Outputs 9



write a program to make polyfill for map or reduce method in javascipt
----------------------------
Array.prototype.myMap = function(callback, thisArg) {
    const result = [];
    
    // Loop through each element in the array
    for (let i = 0; i < this.length; i++) {
        if (this.hasOwnProperty(i)) {
            // Call the callback function with the current element
            result.push(callback.call(thisArg, this[i], i, this));
        }
    }
    
    return result;
};

// Example Usage:
const arr = [1, 2, 3];
const mappedArr = arr.myMap((item) => item * 2);
console.log(mappedArr);  // Output: [2, 4, 6]




what will the output
----------------------------
const firstName = fun();

let name = "vivek"
function fun(){
    return `my ${name} is prjapati`
}
console.log(firstName) // ReferenceError: Cannot access 'name' before initialization



[1, 2, 3].map(num => {
  if (typeof num === 'number') return;
  return num * 2;
});
// [undefined, undefined, undefined] - However, we don’t return a value. When we don’t return a value from the function, the function returns undefined. For every element in the array, the function block gets called, so for each element we return undefined.

------------------------------------------

function getInfo(member, year) {
  member.name = 'Lydia';
  year = '1998';
}

const person = { name: 'Sarah' };
const birthYear = '1997';

getInfo(person, birthYear);

console.log(person, birthYear); // { name: "Lydia" }, "1997"

------------------------------------------
function greeting() {
  throw 'Hello world!';
}

function sayHi() {
  try {
    const data = greeting();
    console.log('It worked!', data);
  } catch (e) {
    console.log('Oh no an error:', e);
  }
}

sayHi(); // Oh no an error: Hello world!

// With the throw statement, we can create custom errors. With this statement, you can throw exceptions. An exception can be a string, a number, a boolean or an object. In this case, our exception is the string 'Hello world!'. 

// With the catch statement, we can specify what to do if an exception is thrown in the try block. An exception is thrown: the string 'Hello world!'. e is now equal to that string, which we log. This results in 'Oh an error: Hello world!'.

------------------------------------------
function Car() {
  this.make = 'Lamborghini';
  return { make: 'Maserati' };
}

const myCar = new Car();
console.log(myCar.make); // Maserati
// When a constructor function is called with the new keyword, it creates an object and sets the this keyword to refer to that object. By default, if the constructor function doesn't explicitly return anything, it will return the newly created object.

//In this case, the constructor function Car explicitly returns a new object with make set to "Maserati", which overrides the default behavior. Therefore, when new Car() is called, the returned object is assigned to myCar, resulting in the output being "Maserati" when myCar.make is accessed.

------------------------------------------
function Car() {
  this.make = 'Lamborghini';
}

const myCar = new Car();
console.log(myCar.make);  // Lamborghini
------------------------------------------
(() => {
  let x = (y = 10);
})();

console.log(typeof x); // undefined - beacuse of block scope
console.log(typeof y); // number

// let x = (y = 10); is actually shorthand for:
// y = 10;
// let x = y;

------------------------------------------
// counter.js
  let counter = 10;
  export default counter;

// index.js
  import myCounter from './counter';
  myCounter += 1;

  console.log(myCounter); // Error

  // An imported module is read-only: you cannot modify the imported module. Only the module that exports them can change its value.
------------------------------------------
const name = 'Lydia';
age = 21;

console.log(delete name); // false
console.log(delete age); // true
// The delete operator returns a boolean value: true on a successful deletion, else it'll return false. However, variables declared with the var, const, or let keywords cannot be deleted using the delete operator.
------------------------------------------
const numbers = [1, 2, 3, 4, 5];
const [y] = numbers;

console.log(y); // 1

// [a, b] = [1, 2]; here a's value is 1 and b value is 2
// [y, z] = [1, 2, 3, 4, 5]; here y value is 1 and z value is 2
------------------------------------------
const user = { name: 'Lydia', age: 21 };
const admin = { admin: true, ...user };

console.log(admin); // { admin: true, name: "Lydia", age: 21 }
------------------------------------------
const person = { name: 'Lydia' };

Object.defineProperty(person, 'age', { value: 21 });

console.log(person); // { name: "Lydia", age: 21 }
console.log(Object.keys(person)); // ["name"]
// With the defineProperty method, we can add new properties to an object, or modify existing ones. When we add a property to an object using the defineProperty method, they are by default not enumerable. The Object.keys method returns all enumerable property names from an object, in this case only "name".

------------------------------------------
const settings = {
  username: 'lydiahallie',
  level: 19,
  health: 90,
};

const data = JSON.stringify(settings, ['level', 'health']);
console.log(data); // {"level":19, "health":90}

------------------------------------------
let num = 10;

const increaseNumber = () => num++;
const increasePassedNumber = number => number++;

const num1 = increaseNumber();
const num2 = increasePassedNumber(num1);

console.log(num1);
console.log(num2);

------------------------------------------

const value = { number: 10 };

const multiply = (x = { ...value }) => {
  console.log((x.number *= 2));
};

multiply();  // 20
multiply();  // 20
multiply(value);  // 20
multiply(value);  // 40
console.log(value) // 40 

------------------------------------------
[1, 2, 3, 4].reduce((x, y) => console.log(x, y));
// The value of the accumulator is equal to the previously returned value of the callback function. If you don't pass the optional initialValue argument to the reduce method, the accumulator is equal to the first element on the first call.

// On the first call, the accumulator (x) is 1, and the current value (y) is 2. We don't return from the callback function, we log the accumulator, and the current values: 1 and 2 get logged.

// If you don't return a value from a function, it returns undefined. On the next call, the accumulator is undefined, and the current value is 3. undefined and 3 get logged.

// On the fourth call, we again don't return from the callback function. The accumulator is again undefined, and the current value is 4. undefined and 4 get logged.

------------------------------------------
console.log(Number(2) === Number(2)); // true
console.log(Boolean(false) === Boolean(false)); // true
console.log(Symbol('foo') === Symbol('foo')); // false
//Every Symbol is entirely unique. The purpose of the argument passed to the Symbol is to give the Symbol a description. The value of the Symbol is not dependent on the passed argument. As we test equality, we are creating two entirely new symbols: the first Symbol('foo'), and the second Symbol('foo'). These two values are unique and not equal to each other, Symbol('foo') === Symbol('foo') returns false.

------------------------------------------
function addToList(item, list) {
  return list.push(item);
}

const result = addToList('apple', ['banana']);
console.log(result); // 2
// The .push() method returns the length of the new array! Previously, the array contained one element (the string "banana") and had a length of 1. After adding the string "apple" to the array, the array contains two elements, and has a length of 2. This gets returned from the addToList function.

// The push method modifies the original array. If you wanted to return the array from the function rather than the length of the array, you should have returned list after pushing item to it.
------------------------------------------
const box = { x: 10, y: 20 };

Object.freeze(box);

const shape = box;
shape.x = 100;

console.log(shape); // { x: 10, y: 20 }
------------------------------------------
function sum(a, b) {
  return a + b;
} // yes it is pure function
------------------------------------------
const add = () => {
  const cache = {};
  return num => {
    if (num in cache) {
      return `From cache! ${cache[num]}`;
    } else {
      const result = num + 10;
      cache[num] = result;
      return `Calculated! ${result}`;
    }
  };
};

const addFunction = add(); 
console.log(addFunction(10)); // Calculated! 20 
console.log(addFunction(10)); // From cache! 20
console.log(addFunction(5 * 2)); // From cache! 20

------------------------------------------

var status = '😎';

setTimeout(() => {
  const status = '😍';

  const data = {
    status: '🥑',
    getStatus() {
      return this.status;
    },
  };

  console.log(data.getStatus()); // "🥑"
  console.log(data.getStatus.call(this)); // "😎"
}, 0);
// With the call method, we can change the object to which the this keyword refers. In functions, the this keyword refers to the the object that the function belongs to. We declared the setTimeout function on the global object, so within the setTimeout function, the this keyword refers to the global object. On the global object, there is a variable called status with the value of "😎". When logging this.status, "😎" gets logged.

------------------------------------------
const person = {
  name: 'Lydia',
  age: 21,
};

let city = person.city;
city = 'Amsterdam';

console.log(person); // { name: "Lydia", age: 21 }

------------------------------------------
const person = {
  name: 'Lydia',
  age: 21,
};

let city = person.city = 'Amsterdam';
console.log(person); // { name: "Lydia", age: 21, city: "Amsterdam" }
------------------------------------------
function checkAge(age) {
  if (age < 18) {
    const message = "Sorry, you're too young.";
  } else {
    const message = "Yay! You're old enough!";
  }

  return message;
}

console.log(checkAge(21)); // ReferenceError
// Variables with the const and let keywords are block-scoped. A block is anything between curly brackets ({ }). In this case, the curly brackets of the if/else statements. You cannot reference a variable outside of the block it's declared in, a ReferenceError gets thrown.
------------------------------------------
console.log('I want pizza'[0]); // 1
------------------------------------------
function sum(num1, num2 = num1) {
  console.log(num1 + num2);
}

sum(10); // 20
------------------------------------------
function giveLydiaPizza() {
  return 'Here is pizza!';
}

const giveLydiaChocolate = () =>
  "Here's chocolate... now go hit the gym already.";

console.log(giveLydiaPizza.prototype); // { constructor: ...}
console.log(giveLydiaChocolate.prototype); //  undefined
// Regular functions, such as the giveLydiaPizza function, have a prototype property, which is an object (prototype object) with a constructor property. Arrow functions however, such as the giveLydiaChocolate function, do not have this prototype property. undefined gets returned when trying to access the prototype property using giveLydiaChocolate.prototype.
------------------------------------------
function nums(a, b) {
  if (a > b) console.log('a is bigger');
  else console.log('b is bigger');
  return
  a + b;
}
console.log(nums(4, 2)); // a is bigger undefined
console.log(nums(1, 2)); // b is bigger undefined
------------------------------------------
const person = {
  name: 'Lydia',
  age: 21,
};

for (const [x, y] of Object.entries(person)) {
  console.log(x, y); //name Lydia and age 21

}
------------------------------------------
























