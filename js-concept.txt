what is javascript
--------------------------------------------------
JavaScript is the Programming Language for the Web. JavaScript can update and change both HTML and CSS. JavaScript can calculate, manipulate and validate data.

what are data types in javascript
--------------------------------------------------
primivve data types : String, Number, Bigint, Boolean, Undefined, Null, Symbol
Non primitive data types : Object, array

difference : Primitive Data types are predefined. Non-Primitive data types are created by the programmer.
Primitive Data types will have certain values.	Non-Primitive data types can be NULL.

what is functions ?
--------------------------------------------------
A JavaScript function is a block of code designed to perform a particular task. A JavaScript function is executed when "something" invokes it (calls it).

 - types of functions
        1. Function Declarations: function functionName(parameters) {// Code to execute}
        2. Function Expressions: const functionName = function(parameters) {// Code to execute};
        3. Named Function Expressions: const functionName = function functionName(parameters) {// Code to execute};
        4. Arrow Functions (introduced in ES6):
        5. Immediately Invoked Function Expressions (IIFE):
        6. Anonymous Functions:













what is an array ?
--------------------------------------------------
An array can hold many values under a single name, and you can access the values by referring to an index number.

what is object ?
--------------------------------------------------
In JavaScript, an object is a collection of key-value pairs where each key (or property) is a string and each value can be any type of data, including other objects.

what is scope in javascript
--------------------------------------------------
// In JavaScript, scope refers to the context in which variables and functions are accessible or visible. It determines how and where these variables and functions can be used within your code.

1. global scope
2. local scope - Variables or functions declared inside a function or block are in local scope.
                They are only accessible within that function or block.
3. Block Scope (introduced with ES6): - Variables declared with let or const inside a block (e.g., within {}) have block scope.
    They are only accessible within that block.
4. Lexical Scope
5. Closure - 

what is loops ?
--------------------------------------------------
In JavaScript, a loop is a control structure that allows you to execute a block of code repeatedly based on a condition or a range of values.

callback function
--------------------------------------------------
Any function that is passed as an argument is called a callback function.
A callback is a function that is to be executed after another function has finished executing — hence the name ‘call back’.

list: Array => reduce, filter, map, forEach
      Event Handling => addEventListener, onclick, onchange, onsubmit
      Asynchronous Operations =>  setTimeout, setInterval, fetch


- demo
    const personOne = (friend, personTwo) => {
        console.log(`I am busy right now, I am talking to ${friend}. I will call you back.`);
        personTwo();
    }
    const personTwo = () => {
        console.log(`hey what's up, I will back you later.`);
    }
    personOne("Devnddra", personTwo);


- Why do we need Callbacks?
        For one very important reason — JavaScript is an event-driven language. This means that instead of waiting for a response before moving on, JavaScript will keep executing while listening for other events.

        Callbacks are a way to make sure a certain code doesn’t execute until another code has already finished execution.


higher order function
--------------------------------------------------
 A higher order function is a function that takes one or more functions as arguments, or returns a function as its result.

 list : Array => forEach, map, filter, find, reduce, some, every
        Functions => bind, setTimeout, setInterval, Promise.then

 - demo
        // Higher-order function
        function applyOperation(number, operation) {
             return operation(number);
        }

        // Define some operations
        function double(x) {
             return x * 2;
        }

        function square(x) {
             return x * x;
        }

        // Use the higher-order function with different operations
        const num = 5;

        console.log(applyOperation(num, double)); // Outputs: 10 (5 * 2)
        console.log(applyOperation(num, square)); // Outputs: 25 (5 * 5)


What is event handling and why use ?
--------------------------------------------------
events refer to user actions, such as such as clicking a button, minimizing the browser window, or submitting a form. Event handling in JavaScript and JavaScript frameworks allows us to respond to user actions and interactions and create dynamic and interactive websites.

- why use ?
    User Interaction: Allows your web application to respond to user actions like clicks, key presses, form submissions, mouse movements, and more.

    Dynamic Updates: Enables you to update the UI or perform actions without requiring a full page reload, improving user experience and application performance.

    Improved Usability: Makes web applications more interactive and engaging by providing immediate feedback or functionality based on user actions.

    Enhanced Functionality: Enables complex behaviors such as form validation, dynamic content loading, animations, and interactive elements.


what are asyncronous operation in javascript ?
--------------------------------------------------
Asynchronous operations in JavaScript allow code to execute without blocking the execution of other code. This is essential for handling tasks that take time to complete, such as network requests, file reading, or waiting for user input. Asynchronous operations enable smooth and responsive applications by allowing tasks to run concurrently.

asynchronous operations are: Callbacks, Promises and async/await

what are promises in javascript ?
--------------------------------------------------
A promise in JavaScript is an object that represents the eventual completion or failure of an asynchronous operation. It is used for handling asynchronous operations, such as making API calls or reading files

- demo
    const myPromise = new Promise((resolve, reject) => {
    // Simulate an asynchronous operation
        setTimeout(() => {
            const success = true; // or false to simulate failure
            if (success) {
            resolve('Operation successful!');
            } else {
            reject('Operation failed.');
            }
        }, 1000); // 1 second delay
    });

what are classes and object in javascript ?
--------------------------------------------------
classes and objects are fundamental concepts used to create and manage structured data and functionality.

1. Object
      Objects in JavaScript are collections of key-value pairs. They are used to group related data and functions together, 
      const person = {
          name: 'Alice',
          age: 30,
          greet: function() {
              console.log('Hello, ' + this.name);
          }
      };
  
      person.greet(); // Outputs: Hello, Alice
  
      // Using the new Object() Syntax: (Just learning purpose)
      const person = new Object();
      person.name = 'Bob';
      person.age = 25;
      person.greet = function() {
          console.log('Hello, ' + this.name);
      };
  
      person.greet(); // Outputs: Hello, Bob

2. Classes
Classes in JavaScript provide a more structured and traditional approach to creating objects and managing their data and behavior. They are syntactical sugar over JavaScript's existing prototype-based inheritance

     class Person {
       constructor(name, age) {
         this.name = name;
         this.age = age;
       }
     
       greet() {
         console.log('Hello, ' + this.name);
       }
     }
     
     const alice = new Person('Alice', 30);
     alice.greet(); // Outputs: Hello, Alice




What is the purpose of "this" in javascript ?
--------------------------------------------------
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.

    "use strict";
    let x = this; // this refer to window object

    "use strict";
    function myFunction() {
        return this; // this is undefined
    }

    const person = {
        firstName: "John",
        lastName: "Doe",
        id: 5566,
        fullName : function() {
          return this.firstName + " " + this.lastName; // this refer to person object
        }
      };

What is hoisting in javascript ?
--------------------------------------------------
Hoisting in JavaScript is a behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. This means that you can reference variables and functions before they are actually declared in the code.


    1. Variable Hoisting:

            console.log(myVar); // Outputs: undefined
            var myVar = 5;
            console.log(myVar); // Outputs: 5

            console.log(myLet); // Throws ReferenceError: Cannot access 'myLet' before initialization
            let myLet = 10;

            console.log(myConst); // Throws ReferenceError: Cannot access 'myConst' before initialization
            const myConst = 15;

    2. Function Hoisting:

            // Example with Function Declarations:
            console.log(myFunction()); // Outputs: 'Hello'
            function myFunction() {
                 return 'Hello';
            }

            // Example with Function Expressions:
            console.log(myFunc); // Outputs: undefined
            var myFunc = function() {
                 return 'Hello';
            };

    3. Class Hoisting:

        const obj = new MyClass(); // Throws ReferenceError: Cannot access 'MyClass' before initialization
        class MyClass {
            constructor() {
                console.log('Class instance created');
            }
        }


Difference between function declaration and function Expression
--------------------------------------------------
    1. syntax
    Function Declaration: function functionName() { ... }
        -  It is hoisted, meaning it can be called before it appears in the code because the function definition is moved to the top during the execution phase.

    Function Expression: const functionName = function() { ... }
        - it is not hoisted, so you can only call it after the function expression has been assigned.

    2. hoisting
            // Example with Function Declarations:
            console.log(myFunction()); // Outputs: 'Hello'
            function myFunction() {
                 return 'Hello';
            }

            // Example with Function Expressions:
            console.log(myFunc()); // Outputs: undefined
            var myFunc = function() {
                 return 'Hello';
            };


prototypes
--------------------------------------------------
Prototype: Every JavaScript object has a prototype. The prototype is also an object and serves as a blueprint for the object, allowing it to inherit properties and methods from the prototype.

Each object in JavaScript has a prototype property that refers to another object. This object can have properties and methods that are inherited by the original object.

- demo

    // Define a constructor function
    function Person(name, age) {
        this.name = name;
        this.age = age;
    }

    // Add a method to the Person prototype
    Person.prototype.greet = function() {
        console.log('Hello, my name is ' + this.name);
    };

    // Create an instance of Person
    const alice = new Person('Alice', 30);

    // Call the prototype method
    alice.greet(); // Outputs: Hello, my name is Alice

    // Check the prototype of alice
    console.log(Object.getPrototypeOf(alice) === Person.prototype); // Outputs: true

- another demo

    let myName = "hitesh     "
   let mychannel = "chai     "
   String.prototype.trueLength = function() {
       console.log(this.trim().length);
   }
   console.log(myName.trueLength()); // 6
   console.log(mychannel.trueLength()); // 4



Curring function
--------------------------------------------------
Currying is a technique in JavaScript where a function that takes multiple arguments is transformed into a sequence of functions, each taking one argument. This allows you to call the function with fewer arguments at a time and build up to the final result.

function curriedAdd(a) {
    return function(b) {
        return function(c) {
            return a + b + c;
        };
    };
}


CallBack Hell 
--------------------------------------------------
Callback hell is a situation in JavaScript where multiple nested callbacks create deeply indented and hard-to-read code, making it difficult to manage and maintain. for solve this situation we can use promises.

setTimeout(()=>{
    console.log(`1️⃣ works is done`);    
    setTimeout(()=>{
        console.log(`2️⃣ works is done`); 
        setTimeout(()=>{
            console.log(`3️⃣ works is done`);  
            setTimeout(()=>{
                console.log(`4️⃣ works is done`); 
                setTimeout(()=>{
                    console.log(`5️⃣ works is done`);   
                    setTimeout(()=>{
                        console.log(`6️⃣ works is done`);    
                    }, 1000) 
                }, 1000)   
            }, 1000)  
        }, 1000)   
    }, 1000)
}, 1000)


Object literals
--------------------------------------------------
object literal is a way to define and create objects using a straightforward and concise syntax. An object literal consists of a list of key-value pairs enclosed in curly braces.

- demo 
    1. let name = "Devendra"
        let obj {
            name // In case of name: name
        }
  
    2. let n = "Student"
        let obj {
            [n] : Yahoo baba // here n is a student
        }
        console.log(obj) // it's also call object literal
  
    3. let name = "Devendra"
       let fullName`my full name is ${name}` // it's call object literal





preventDefault and stopPropagation
--------------------------------------------------------
The preventDefault method is used to prevent the default behaviour or action associated with the event from occurring.

The stopPropagation method is used to stop the event from propagating (bubbling) up the DOM tree. By default, events bubble up from the target element to its ancestors, triggering event handlers on each ancestor. stopPropagation prevents this bubbling behavior.


modules
--------------------------------------------------------
JavaScript modules are a way to organize and encapsulate code into separate files or units, making it easier to manage and reuse code across different parts of an application.

Concepts of JavaScript Modules : Import and Export



The recursive call
--------------------------------------------------------
    The recursive call is what handles the function calling itself again. In the doSomething function, the recursive call is the line below.
    expamle
        function doSomething(n) {
            if(n === 0) {
            console.log("TASK COMPLETED!")
            return
            }
            console.log("I'm doing something.")
            doSomething(n - 1)
        }
        doSomething(3)




difference between closure and lexical scoping 
-------------------------------------------------------
A closure is the combination of a functions where inner function can access outer functins variables.
the difference is closure return function and lexical scopping call function

        closure example
        ---------------
        const outerFunc = (a) => {
            let b = 10;
            const innerFunc = () => {
                let sum = a + b;
            }
            return innerFunc;  
        }    
    
        outerFunc(5)
    
        lexical scoping example
        ------------------------
        const outerFunc = (a) => {
            let b = 10;
            const innerFunc = () => {
                let sum = a + b;
            }
            innerFunc();  
        }    
    
        outerFunc(5)



let const var - block scope
--------------------------------------------------------
    global scope – so you can access it everywhere (inside and outside functions).
    1. var 
        global and local scope
        reassign, redeclare

        function print() {
            var number = 50
            var square = number * number
            console.log(square)
        }
        console.log(number) // ReferenceError: number is not defined, because of variable diclare in local scope

        function print() {
            var square1 = number * number
            console.log(square1) // NaN

            var number = 50

            var square2 = number * number
            console.log(square2) // 2500
        }


    2. let 
        global, block and local scope
        reassign, can not redeclare
        You can find blocks in if, loop, switch
        
        let number = 50
        function print() {
            let square = number * number

            if (number < 60) {
                var largerNumber = 80
                let anotherLargerNumber = 100

                console.log(square)  // 2500
            }

            console.log(largerNumber) //80
            console.log(anotherLargerNumber) // ReferenceError: anotherLargerNumber is not defined, because of block scope
        }
        console.log(largerNumber) // ReferenceError: largerNumber is not defined

        let number = 50
        let number = 100 // SyntaxError: Identifier 'number' has already been declared

        console.log(number) // ReferenceError: Cannot access 'number' before initialization
        let number = 50


    3. const 
        global, block and local scope
        can not reassign, can not redclare, but object can modified 

        const number = 50
        number = 100 // TypeError: Assignment to constant variable



Pure functions
------------------------------------------------------------------------------------------------------------------
Pure functions are functions that accept an input and return a value without modifying and data outside its predictible and don't modify and variable

    var x = 10;
    function add() {
        return x+1;
    }
    add(10)



The Async/Await
------------------------------------------------------------------------------------------------------------------
Async : To create an asynchronous function, you need to add the async keyword before your function name.
Await : The await keyword basically makes JavaScript wait until the Promise object is resolved or rejected.

    How to Handle Errors in Async/Await
    -----------------------------------
        async function runProcess() {
            try {
                const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
                const json = await response.json();
                console.log(json);
            } catch (error) {
                console.log(error);
            }
        }

        With arrow function
        -------------------
        const runProcess = async () => {
            try {
                const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
                const json = await response.json();
                console.log(json);
            } catch (error) {
                console.log(error);
            }
        };




    Using Fatch
    -----------
    fetch('https://jsonplaceholder.typicode.com/todos/1')
    .then(response => response.json())
    .then(data => console.log(data))
    .catch(error => console.log(error));




Promises
------------------------------------------------------------------------------------------------------------------
// A Promise represents an operation that hasn’t completed yet but is expected to in the future. It can be in one of three states:
// It allows you to work with asynchronous code in a more manageable way, by chaining .then() for success or .catch() for errors.

        1. Pending: The initial state, neither fulfilled nor rejected.
        2. Fulfilled: The operation completed successfully.
        3. Rejected: The operation failed

        // Create a new Promise
        let fetchData = new Promise((resolve, reject) => {
            // Simulate a delay with setTimeout
            setTimeout(() => {
            fetch('https://jsonplaceholder.typicode.com/todos/1')
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json(); // Parse the JSON response
                })
                .then((data) => {
                 resolve(data); // Resolve the promise with the fetched data
                })
                .catch((error) => {
                   reject(`Failed to fetch data: ${error.message}`); // Reject if there's an error
                });
            }, 2000); // Simulate a delay of 2 seconds
        });
        
        // Using the promise
        fetchData
            .then((data) => {
            console.log('Data fetched successfully:', data); // This will log the fetched data
            })
            .catch((error) => {
            console.error(error); // Handle any rejection
            });
      

Difference between shallow and deep copy
-----------------------------
   A shallow copy means that only the top-level properties of an object are copied. If the object has nested objects (or arrays), the references to those nested objects are copied, not the actual data. This means that changes to the nested objects in the copy will also affect the original object because they both reference the same nested object.
   
   shallow copy method
       1. const shallowCopy = Object.assign({}, original);
       2. Spread operator ({ ...obj })
   
   
   A deep copy creates a completely independent copy of the original object, including all nested objects or arrays. 
   
   deep copy method
       1. JSON.parse(JSON.stringify(obj))
   




Debouncing and Throttling
-----------------------------
Debouncing : Debouncing is a technique that delays the execution of a function until the user stops performing a certain action for a specified amount of time. 
    For example, if you have a search bar that fetches suggestions from the backend as the user types, you can debounce the function that makes the API call, so that it only runs after the user stops typing for a few seconds. This way, you can avoid making too many API calls that might overload your server or return irrelevant results.

    example
    -------
        // Simulated API function
        function fetchDataFromApi() {
            console.log("API call made");
            // Replace this with your actual API call
        }

        // Debounce function
        function debounce(func, delay) {
            let timeoutId;
            
            return function() {
                clearTimeout(timeoutId);
                timeoutId = setTimeout(func, delay);
            };
        }

        // Create a debounced version of the API call function
        const debouncedFetchData = debounce(fetchDataFromApi, 1000); // Debounce for 1 second (1000 milliseconds)

        // Simulated event triggering API call
        function handleUserInput() {
            console.log("User input detected");
            debouncedFetchData();
        }

        // Simulated user input event (e.g., button click)
        handleUserInput(); // This will trigger API call after 1 second
        handleUserInput(); // This will cancel the previous timer and start a new one, API call will be made after 1 second




Throttling : Throttling is a technique that limits the execution of a function to once in every specified time interval.
    For example, if you have a resize event handler that adjusts the layout of your page, you can throttle the function that updates the layout, so that it only runs once every 100ms.


    example
    -------

        // Function to be throttled
        function handleResize() {
            console.log("Window resized");
            // Your resizing logic goes here
        }
        
        // Throttle function
        function throttle(func, limit) {
            let lastExecutionTime = 0;
        
            return function() {
            const now = Date.now();
            if (now - lastExecutionTime >= limit) {
                func();
                lastExecutionTime = now;
            }
            };
        }
        
        // Throttle the resize event handler
        const throttledResizeHandler = throttle(handleResize, 1000); // Throttle to at most one execution per second
        
        // Attach the throttled event handler to the window resize event
        window.addEventListener("resize", throttledResizeHandler);
        






Middlewere
----------------------------------
Middleware is a request handler that processes and manipulate requests and responses before they reach route handlers or client.

Middleware is a function or piece of code that sits between the request and the response in a web application. It can modify the request or the response, perform operations like authentication, logging, or data validation, and then pass control to the next middleware or route handler.



Lazzy loading
----------------------------------
Lazy loading can be achieved by dynamically importing components only when they are needed, which can improve the initial page load performance. In Next.js, this can be done using next/dynamic.

    // pages/index.js

    import dynamic from 'next/dynamic';
    import { useState } from 'react';

    // Dynamically import the HeavyComponent
    const LazyHeavyComponent = dynamic(() => import('../components/HeavyComponent'), {
        ssr: false, // Disables server-side rendering for this component (optional)
        loading: () => <p>Loading...</p>, // Optional loading spinner or message
    });

    export default function Home() {
    const [show, setShow] = useState(false);

    return (
        <div>
        <h1>Welcome to the Next.js Lazy Loading Demo</h1>
        <button onClick={() => setShow((prev) => !prev)}>
            Toggle Lazy Loaded Component
        </button>

        {show && <LazyHeavyComponent />}
        </div>
    );
    }


    // components/HeavyComponent.js

    const HeavyComponent = () => {
        return (
        <div>
            <h2>This is a heavy component!</h2>
            <p>It takes time to load, and it's being lazily loaded.</p>
        </div>
        );
    };
    
    export default HeavyComponent;
  




setTimeout, setInterval and clearTimeout
-------------------------------------------------------------
setTimeout: setTimeout allows you to run a function after a certain amount of time has passed.

setTimeout(function, milliseconds);

// With parameter or argument
setTimeout(function (param1, param2) {
    // Code to be executed after the delay
}, delay);

// simple
setTimeout(() => {
    console.log("This message appears after 2 seconds");
  }, 2000); // 2000 milliseconds = 2 seconds



setInterval : setInterval is a function in JavaScript that is used to repeatedly execute a given function at a specified interval. 

setInterval(myTimer, 1000);

function myTimer() {
                    const date = new Date();
                    document.getElementById("demo").innerHTML = date.toLocaleTimeString();
                }
                
                
                clearTimeout : clearTimeout allows developers to clear and reset the timer created by the setTimeout() method.
                
                const myTimeout = setTimeout(myGreeting, 3000);
                
                function myGreeting() {
                    document.getElementById("demo").innerHTML = "Happy Birthday!"
                }
                
                function myStopFunction() {
                    clearTimeout(myTimeout);
                }
                
                
                
                
Reduce method
-------------------------------------------------------------

The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in a single output value.
The reduce() method does not change the original array.

The reducer function takes four arguments:
    Accumulator
    Current Value
    Current Index
    Source Array
    
    array.reduce(callbackFunction(accumulator, currentValue, currentIndex, arr), initialValue)
    
    const array1 = [1, 2, 3, 4];
    
    // 0 + 1 + 2 + 3 + 4
    const initialValue = 0;
    const sumWithInitial = array1.reduce((accumulator, currentValue) => accumulator + currentValue,
    initialValue,
);




difference between forin and for of loop
--------------------------------------------------------------------------
forin - Iterates over keys or property names	
        Suitable for iterating object properties
        Iterates over array indices (not values)	
        Objects, arrays, and other enumerable types	

    demo
        const person = { name: 'Alice', age: 25 };
        for (let key in person) {
            console.log(key);  // 'name' and 'age'
            console.log(person[key]);  // 'Alice' and '25'
        }
    

forof - Iterates over values of iterable objects
Not suitable for iterating object properties
Iterates over array values
Arrays, strings, maps, sets, and other iterables



* Differences Between map and forEach Statement in JavaScript
--------------------------------------------------------------------------
The main difference between map and forEach is that map returns a new array with the results of the function applied to each element, while forEach does not return anything. Both map and forEach can modify the original array if the callback function modifies its elements.8 Sept 2023

// Using forEach
const arr1 = [1, 2, 3];
arr1.forEach(num => console.log(num * 2)); 
// Output: 2, 4, 6 (prints each value but returns undefined)

// Using map
const arr2 = [1, 2, 3];
const newArr = arr2.map(num => num * 2);
console.log(newArr); 
// Output: [2, 4, 6] (returns a new array with transformed values)




Main Method list
-------------------------------------------------------------
// Math Method or number method
// abs, trunc, round, floor, ceil, min, max, sqrt

// String Method
// includes, charAt, toLowerCase, toUpperCase, trim, toString, indexOf, lastIndexOf, concat, replace, replaceAll, split, length

// Object Method
// keys, values, entries, freeze, date

// Array Method
// push, unshift, pop, shift, map, filter, find, join, length, sort, flat, slice, concat, findIndex, includes, keys

// Data Type
// Number, string, boolean, undefined, null, object, array, date, bigint, symbol 

// Dom
// getElementId, getElementsByClassName, getElementsByTagName, createElement, appendChild, removeChild, getAttribute, setAttribute, innerHTML, textContent, innerText, insertAdjacentHTML, classList, remove, localStorage

// BOM
    // window.open(), window.close(), window.moveTo(), window.resizeTo(), window.location.href, window.location.hostname, window.location.pathname, window.location.protocol, window.confirm(), window.alert, window.onClick, window.onScroll
    
    // JSON 
    // JSON stands for JavaScript Object Notation. JSON is a text format for storing and transporting data. JSON is "self-describing" and easy to understand. JSON is parsed into a ready-to-use JavaScript object.
    
    // JSON.parese(), JSON.stringify(),
    
    


    
    
    
JavaScript execution
-------------------------------------------------------------
1. global execution phase (this) or window object

2. Creation(Memory) Phase : Variable and Function Declarations: During this phase, the JavaScript engine sets up memory space for variables and functions. Variables are initialized with undefined, and functions are stored in memory.
Execution Phase:

3. Execution Phase : The JavaScript engine starts executing the code line by line, using the values and functions set up in the creation phase.

- demo 
    let val1 = 10;
    let val2 = 5;
    function addNum(mun1, num2) {
        let total = num1 + num2;
        return total;
    }
    let result1 = addNum(val1, val2);
    let result2 = addNum(10, 2);

    Creation(Memory) Phase
        val1 - undefined
        val2 - undefined
        addNum - method or definition
        result1 - undefined
        result2 - undefined

    Execution Phase
        val1 - 10
        val2 - 5
        addNum - New variable environment + exetution thread
        result1 - 15
        result2 - 2
