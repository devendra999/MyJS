what is javascript
--------------------------------------------------
JavaScript is the Programming Language for the Web. JavaScript can update and change both HTML and CSS. JavaScript can calculate, manipulate and validate data.

what are data types in javascript
--------------------------------------------------
primivve data types : String, Number, Bigint, Boolean, Undefined, Null, Symbol
Non primitive data types : Object, array

difference : Primitive Data types are predefined. Non-Primitive data types are created by the programmer.
Primitive Data types will have certain values.	Non-Primitive data types can be NULL.

what is functions ?
--------------------------------------------------
A JavaScript function is a block of code designed to perform a particular task. A JavaScript function is executed when "something" invokes it (calls it).

 - types of functions
        1. Function Declarations: function functionName(parameters) {// Code to execute}
        2. Function Expressions: const functionName = function(parameters) {// Code to execute};
        3. Named Function Expressions: const functionName = function functionName(parameters) {// Code to execute};
        4. Arrow Functions (introduced in ES6):
        5. Immediately Invoked Function Expressions (IIFE):
        6. Anonymous Functions:













what is an array ?
--------------------------------------------------
An array can hold many values under a single name, and you can access the values by referring to an index number.

what is object ?
--------------------------------------------------
In JavaScript, an object is a collection of key-value pairs where each key (or property) is a string and each value can be any type of data, including other objects.

what is scope in javascript
--------------------------------------------------
// In JavaScript, scope refers to the context in which variables and functions are accessible or visible. It determines how and where these variables and functions can be used within your code.

1. global scope
2. local scope - Variables or functions declared inside a function or block are in local scope.
                They are only accessible within that function or block.
3. Block Scope (introduced with ES6): - Variables declared with let or const inside a block (e.g., within {}) have block scope.
    They are only accessible within that block.
4. Lexical Scope
5. Closure - 

what is loops ?
--------------------------------------------------
In JavaScript, a loop is a control structure that allows you to execute a block of code repeatedly based on a condition or a range of values.

callback function
--------------------------------------------------
Any function that is passed as an argument is called a callback function.
A callback is a function that is to be executed after another function has finished executing — hence the name ‘call back’.

list: Array => reduce, filter, map, forEach
      Event Handling => addEventListener, onclick, onchange, onsubmit
      Asynchronous Operations =>  setTimeout, setInterval, fetch


- demo
    const personOne = (friend, personTwo) => {
        console.log(`I am busy right now, I am talking to ${friend}. I will call you back.`);
        personTwo();
    }
    const personTwo = () => {
        console.log(`hey what's up, I will back you later.`);
    }
    personOne("Devnddra", personTwo);


- Why do we need Callbacks?
        For one very important reason — JavaScript is an event-driven language. This means that instead of waiting for a response before moving on, JavaScript will keep executing while listening for other events.

        Callbacks are a way to make sure a certain code doesn’t execute until another code has already finished execution.


higher order function
--------------------------------------------------
 A higher order function is a function that takes one or more functions as arguments, or returns a function as its result.

 list : Array => forEach, map, filter, find, reduce, some, every
        Functions => bind, setTimeout, setInterval, Promise.then

 - demo
        // Higher-order function
        function applyOperation(number, operation) {
             return operation(number);
        }

        // Define some operations
        function double(x) {
             return x * 2;
        }

        function square(x) {
             return x * x;
        }

        // Use the higher-order function with different operations
        const num = 5;

        console.log(applyOperation(num, double)); // Outputs: 10 (5 * 2)
        console.log(applyOperation(num, square)); // Outputs: 25 (5 * 5)


What is event handling and why use ?
--------------------------------------------------
events refer to user actions, such as such as clicking a button, minimizing the browser window, or submitting a form. Event handling in JavaScript and JavaScript frameworks allows us to respond to user actions and interactions and create dynamic and interactive websites.

- why use ?
    User Interaction: Allows your web application to respond to user actions like clicks, key presses, form submissions, mouse movements, and more.

    Dynamic Updates: Enables you to update the UI or perform actions without requiring a full page reload, improving user experience and application performance.

    Improved Usability: Makes web applications more interactive and engaging by providing immediate feedback or functionality based on user actions.

    Enhanced Functionality: Enables complex behaviors such as form validation, dynamic content loading, animations, and interactive elements.


what are asyncronous operation in javascript ?
--------------------------------------------------
Asynchronous operations in JavaScript allow code to execute without blocking the execution of other code. This is essential for handling tasks that take time to complete, such as network requests, file reading, or waiting for user input. Asynchronous operations enable smooth and responsive applications by allowing tasks to run concurrently.

asynchronous operations are: Callbacks, Promises and async/await

what are promises in javascript ?
--------------------------------------------------
A promise in JavaScript is an object that represents the eventual completion or failure of an asynchronous operation. It is used for handling asynchronous operations, such as making API calls or reading files

- demo
    const myPromise = new Promise((resolve, reject) => {
    // Simulate an asynchronous operation
        setTimeout(() => {
            const success = true; // or false to simulate failure
            if (success) {
            resolve('Operation successful!');
            } else {
            reject('Operation failed.');
            }
        }, 1000); // 1 second delay
    });

what are classes and object in javascript ?
--------------------------------------------------
classes and objects are fundamental concepts used to create and manage structured data and functionality.

1. Object
      Objects in JavaScript are collections of key-value pairs. They are used to group related data and functions together, 
      const person = {
          name: 'Alice',
          age: 30,
          greet: function() {
              console.log('Hello, ' + this.name);
          }
      };
  
      person.greet(); // Outputs: Hello, Alice
  
      // Using the new Object() Syntax: (Just learning purpose)
      const person = new Object();
      person.name = 'Bob';
      person.age = 25;
      person.greet = function() {
          console.log('Hello, ' + this.name);
      };
  
      person.greet(); // Outputs: Hello, Bob

2. Classes
Classes in JavaScript provide a more structured and traditional approach to creating objects and managing their data and behavior. They are syntactical sugar over JavaScript's existing prototype-based inheritance

     class Person {
       constructor(name, age) {
         this.name = name;
         this.age = age;
       }
     
       greet() {
         console.log('Hello, ' + this.name);
       }
     }
     
     const alice = new Person('Alice', 30);
     alice.greet(); // Outputs: Hello, Alice




What is the purpose of "this" in javascript ?
--------------------------------------------------
Alone, this refers to the global object.
In a function, this refers to the global object.
In a function, in strict mode, this is undefined.

    "use strict";
    let x = this; // this refer to window object

    "use strict";
    function myFunction() {
        return this; // this is undefined
    }

    const person = {
        firstName: "John",
        lastName: "Doe",
        id: 5566,
        fullName : function() {
          return this.firstName + " " + this.lastName; // this refer to person object
        }
      };

What is hoisting in javascript ?
--------------------------------------------------
Hoisting in JavaScript is a behavior where variable and function declarations are moved to the top of their containing scope during the compilation phase, before the code is executed. This means that you can reference variables and functions before they are actually declared in the code.


    1. Variable Hoisting:

            console.log(myVar); // Outputs: undefined
            var myVar = 5;
            console.log(myVar); // Outputs: 5

            console.log(myLet); // Throws ReferenceError: Cannot access 'myLet' before initialization
            let myLet = 10;

            console.log(myConst); // Throws ReferenceError: Cannot access 'myConst' before initialization
            const myConst = 15;

    2. Function Hoisting:

            // Example with Function Declarations:
            console.log(myFunction()); // Outputs: 'Hello'
            function myFunction() {
                 return 'Hello';
            }

            // Example with Function Expressions:
            console.log(myFunc); // Outputs: undefined
            var myFunc = function() {
                 return 'Hello';
            };

    3. Class Hoisting:

        const obj = new MyClass(); // Throws ReferenceError: Cannot access 'MyClass' before initialization
        class MyClass {
            constructor() {
                console.log('Class instance created');
            }
        }


Difference between function declaration and function Expression
--------------------------------------------------
    1. syntax
    Function Declaration: function functionName() { ... }
    Function Expression: const functionName = function() { ... }

    2. hoisting
            // Example with Function Declarations:
            console.log(myFunction()); // Outputs: 'Hello'
            function myFunction() {
                 return 'Hello';
            }

            // Example with Function Expressions:
            console.log(myFunc); // Outputs: undefined
            var myFunc = function() {
                 return 'Hello';
            };


prototypes
--------------------------------------------------
Prototype: Every JavaScript object has a prototype. The prototype is also an object and serves as a blueprint for the object, allowing it to inherit properties and methods from the prototype.

Each object in JavaScript has a prototype property that refers to another object. This object can have properties and methods that are inherited by the original object.

- demo

    // Define a constructor function
    function Person(name, age) {
        this.name = name;
        this.age = age;
    }

    // Add a method to the Person prototype
    Person.prototype.greet = function() {
        console.log('Hello, my name is ' + this.name);
    };

    // Create an instance of Person
    const alice = new Person('Alice', 30);

    // Call the prototype method
    alice.greet(); // Outputs: Hello, my name is Alice

    // Check the prototype of alice
    console.log(Object.getPrototypeOf(alice) === Person.prototype); // Outputs: true

- another demo

    let myName = "hitesh     "
   let mychannel = "chai     "
   String.prototype.trueLength = function() {
       console.log(this.trim().length);
   }
   console.log(myName.trueLength()); // 6
   console.log(mychannel.trueLength()); // 4



Curring function
--------------------------------------------------
Currying is a technique in JavaScript where a function that takes multiple arguments is transformed into a sequence of functions, each taking one argument. This allows you to call the function with fewer arguments at a time and build up to the final result.

function curriedAdd(a) {
    return function(b) {
        return function(c) {
            return a + b + c;
        };
    };
}


CallBack Hell 
--------------------------------------------------
Callback hell is a situation in JavaScript where multiple nested callbacks create deeply indented and hard-to-read code, making it difficult to manage and maintain. for solve this situation we can use promises.

setTimeout(()=>{
    console.log(`1️⃣ works is done`);    
    setTimeout(()=>{
        console.log(`2️⃣ works is done`); 
        setTimeout(()=>{
            console.log(`3️⃣ works is done`);  
            setTimeout(()=>{
                console.log(`4️⃣ works is done`); 
                setTimeout(()=>{
                    console.log(`5️⃣ works is done`);   
                    setTimeout(()=>{
                        console.log(`6️⃣ works is done`);    
                    }, 1000) 
                }, 1000)   
            }, 1000)  
        }, 1000)   
    }, 1000)
}, 1000)


Object literals
--------------------------------------------------
object literal is a way to define and create objects using a straightforward and concise syntax. An object literal consists of a list of key-value pairs enclosed in curly braces.

- demo 
    1. let name = "Devendra"
        let obj {
            name // In case of name: name
        }
  
    2. let n = "Student"
        let obj {
            [n] : Yahoo baba // here n is a student
        }
  
    3. let name = "Devendra"
       let fullName`my full name is ${name}`

--------------------------------------------------
