Example of HOC
-------------------------------------

ðŸ§© 1. withLoading.js â€“ The HOC

    import React from 'react';

    export function withLoading(WrappedComponent) {
        return function WithLoadingComponent(props) {
            const { isLoading, ...rest } = props;
        if (isLoading) {
        return <div>Loading...</div>;
        }
        return <WrappedComponent {...rest} />;
    };
    }


ðŸ§© 2. UserList.js â€“ A simple component
    
    import React from 'react';

    const UserList = ({ users }) => {
    return (
        <ul>
        {users.map((user) => (
            <li key={user.id}>{user.name}</li>
        ))}
        </ul>
    );
    };

    export default UserList;
    
ðŸ§© 3. App.js â€“ Using the HOC

import React, { useEffect, useState } from 'react';
    import UserList from './UserList';
    import { withLoading } from './withLoading';

    const UserListWithLoading = withLoading(UserList);

    const App = () => {
        const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        // Simulate a fake API call
        setTimeout(() => {
        setUsers([
            { id: 1, name: 'Alice' },
            { id: 2, name: 'Bob' },
        ]);
        setLoading(false);
        }, 2000);
    }, []);

    return (
        <div>
        <h1>User List</h1>
        <UserListWithLoading isLoading={loading} users={users} />
        </div>
    );
    };

    export default App;




Example of useCallback hook
-------------------------------------
import React, { useState, useCallback, memo } from 'react';

import './style.css';

export default function App() {
  console.log('Parent re-rendered');

  const [counter, setCounter] = useState(0);

  const handleClick = useCallback(() => {
    return setCounter((prev) => prev + 1);
  }, []);

  return (
    <div>
      <h1>{counter}</h1>
      <Child onClick={handleClick} />
    </div>
  );
}

const Child = memo(({ onClick }) => {
  console.log('child re-rendered');

  return <button onClick={onClick}>Add</button>;
});





Example of useMemo
-------------------------------------
import React, { useState, useMemo } from 'react';

const App = () => {
  const [number, setNumber] = useState(0);
  const [darkMode, setDarkMode] = useState(false);

  // Simulate heavy calculation
  const squaredNumber = useMemo(() => {
    console.log('Calculating square...');
    return number * number;
  }, [number]);

  const themeStyles = {
    backgroundColor: darkMode ? '#333' : '#fff',
    color: darkMode ? '#fff' : '#000',
    padding: '1rem',
    marginTop: '1rem',
  };

  return (
    <div>
      <h2>useMemo Example</h2>
      <input
        type="number"
        value={number}
        onChange={(e) => setNumber((prev) => prev + 1)}
      />
      <button onClick={() => setDarkMode((prev) => !prev)}>
        Toggle Dark Mode
      </button>
      <div style={themeStyles}>
        <p>Square: {squaredNumber}</p>
      </div>
    </div>
  );
};

export default App;



Example of memo
-------------------------------------
import React, { useState } from 'react';

// Child component
const Child = React.memo(({ count }) => {
  console.log('Child component rendered');
  return <h2>Child Count: {count}</h2>;
});

// Parent component
const App = () => {
  const [count, setCount] = useState(0);
  const [otherState, setOtherState] = useState(0);
  
  return (
      <div>
      <h1>React.memo Demo</h1>
      <h2>Other State : {otherState}</h2>
      <Child count={count} />

      <button onClick={() => setCount(count + 1)}>Increment Count</button>
      <button onClick={() => setOtherState(otherState + 1)}>Update Other State</button>
    </div>
);
};

export default App;




Example of useLayout hook
-------------------------------------
import React, { useLayoutEffect, useRef, useState } from 'react';

const Box = () => {
  const boxRef = useRef();
  const [width, setWidth] = useState(0);

  useLayoutEffect(() => {
    // This runs before the browser paints the screen
    const boxWidth = boxRef.current.getBoundingClientRect().width;
    setWidth(boxWidth);
    console.log('useLayoutEffect ran. Width:', boxWidth);
  }, []);

  return (
    <div>
      <div
        ref={boxRef}
        style={{
          width: '300px',
          height: '100px',
          backgroundColor: 'lightblue',
        }}
      >
        I'm a box
      </div>
      <p>Box width: {width}px</p>
    </div>
  );
};

export default Box;



Example of forwardRef hook
-------------------------------------
import React, { useRef, forwardRef } from 'react';

// Input component that forwards the ref
const CustomInput = forwardRef((props, ref) => {
  return <input ref={ref} type="text" placeholder="Type something..." />;
});

const App = () => {
  const inputRef = useRef();

  const focusInput = () => {
    if(inputRef.current) {
        inputRef.current.focus(); // Directly focuses the input
    }
  };

  return (
    <div>
      <h1>forwardRef Demo</h1>
      <CustomInput ref={inputRef} />
      <button onClick={focusInput}>Focus Input</button>
    </div>
  );
};

export default App;










